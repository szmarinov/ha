#!/usr/bin/env python3
"""
üèí HOCKEY ARENA MASTER AI v4.0 - COMPLETE GUI SYSTEM
==================================================
–ù–∞–π-–Ω–∞–ø—Ä–µ–¥–Ω–∞–ª–∞—Ç–∞ AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞ –¥–æ–º–∏–Ω–∏—Ä–∞–Ω–µ –≤ Hockey Arena
–ë–∞–∑–∏—Ä–∞–Ω–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ –æ—Ç ha-navod.eu
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import requests
from bs4 import BeautifulSoup
import json
import time
from datetime import datetime, timedelta
import re
import csv
import random
import math
import threading
import logging
import os
import sys
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
from urllib.parse import urljoin, urlparse
import webbrowser

# Matplotlib –∑–∞ –≥—Ä–∞—Ñ–∏–∫–∏
try:
    import matplotlib.pyplot as plt
    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
    import seaborn as sns
    plt.style.use('dark_background')
    CHARTS_AVAILABLE = True
except ImportError:
    CHARTS_AVAILABLE = False

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ ha_assist –ø–∞–ø–∫–∞
WORK_DIR = "ha_assist"
if not os.path.exists(WORK_DIR):
    os.makedirs(WORK_DIR)
os.chdir(WORK_DIR)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ logging
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–≤–∞ –¥–µ—Ç–∞–π–ª–Ω–∞ debug –∏ error —Å–∏—Å—Ç–µ–º–∞"""
    log_formatter = logging.Formatter(
        '%(asctime)s | %(levelname)8s | %(module)s:%(lineno)d | %(message)s'
    )
    
    # Console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(log_formatter)
    console_handler.setLevel(logging.INFO)
    
    # File handlers
    debug_handler = logging.FileHandler('hockey_arena_debug.log', encoding='utf-8')
    debug_handler.setFormatter(log_formatter)
    debug_handler.setLevel(logging.DEBUG)
    
    error_handler = logging.FileHandler('hockey_arena_errors.log', encoding='utf-8')
    error_handler.setFormatter(log_formatter)
    error_handler.setLevel(logging.ERROR)
    
    # Root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    root_logger.addHandler(console_handler)
    root_logger.addHandler(debug_handler)
    root_logger.addHandler(error_handler)
    
    return root_logger

logger = setup_logging()

@dataclass
class PlayerStats:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –∏–≥—Ä–∞—á —Å–ø–æ—Ä–µ–¥ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ"""
    name: str
    age: int
    position: str
    
    # –û—Å–Ω–æ–≤–Ω–∏ –∞—Ç—Ä–∏–±—É—Ç–∏
    goa: int = 0  # Br√°na
    def_: int = 0  # Obrana
    att: int = 0  # √ötok
    sho: int = 0  # Streƒæba
    pas: int = 0  # Nahr√°vka/Kontrola puku
    str_: int = 0  # Sila
    spe: int = 0  # R√Ωchlos≈•
    dis: int = 0  # Sebaovl√°danie
    
    # –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –∞—Ç—Ä–∏–±—É—Ç–∏
    energy: int = 100  # Energia
    form: int = 100   # Forma
    experience: int = 0  # Sk√∫senos≈•
    quality: int = 0
    potential: int = 0
    salary: int = 0
    value: int = 0
    
    def calculate_position_rating(self, position_type: str) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ø–æ—Ä–µ–¥ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –±–∞–∑–∏—Ä–∞–Ω–æ –Ω–∞ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ—Ç–æ"""
        if position_type.lower() == 'goalkeeper':
            # –ó–∞ –≤—Ä–∞—Ç–∞—Ä–∏: Br√°na –µ –æ—Å–Ω–æ–≤–µ–Ω + R√Ωchlos≈•
            return (self.goa * 0.6 + self.spe * 0.3 + self.pas * 0.1)
        elif position_type.lower() == 'defender':
            # –ó–∞ –∑–∞—â–∏—Ç–Ω–∏—Ü–∏: Obrana –≥–ª–∞–≤–µ–Ω + Sila + –æ—Å—Ç–∞–Ω—É–∫–∏
            return (self.def_ * 0.4 + self.str_ * 0.25 + self.spe * 0.15 + 
                   self.pas * 0.1 + self.att * 0.1)
        elif position_type.lower() == 'center':
            # –ó–∞ —Ü–µ–Ω—Ç—Ä–æ–≤–µ: Nahr√°vka –≤–∞–∂–Ω–∞ + √ötok + Sila (–∑–∞ –≤—Ö–≤—ä—Ä–ª—è–Ω–∏—è)
            return (self.pas * 0.3 + self.att * 0.25 + self.str_ * 0.2 + 
                   self.spe * 0.15 + self.sho * 0.1)
        else:  # forward/wing
            # –ó–∞ –Ω–∞–ø–∞–¥–∞—Ç–µ–ª–∏: √ötok + Streƒæba –≥–ª–∞–≤–Ω–∏
            return (self.att * 0.3 + self.sho * 0.3 + self.spe * 0.2 + 
                   self.pas * 0.15 + self.str_ * 0.05)

@dataclass
class TacticalSpecialization:
    """–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Ä–µ–¥ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ—Ç–æ"""
    name: str
    description: str
    requirements: Dict[str, float]
    effectiveness: float = 0.0

# –û—Ñ–∏—Ü–∏–∞–ª–Ω–∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
TACTICAL_SPECIALIZATIONS = {
    'hura_system': TacticalSpecialization(
        name="Hur√° syst√©m",
        description="–ë–µ–∑ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, —Ö–∞–æ—Ç–∏—á–Ω–æ –∏–≥—Ä–∞–µ–Ω–µ",
        requirements={}
    ),
    'counter_attacks': TacticalSpecialization(
        name="Proti√∫toky", 
        description="–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–∞–Ω–∞ –∑–∞—â–∏—Ç–∞ –∏ –±—ä—Ä–∑–∏ –∫–æ–Ω—Ç—Ä–∞–∞—Ç–∞–∫–∏",
        requirements={'def_': 0.4, 'spe': 0.3, 'dis': 0.3}
    ),
    'forechecking': TacticalSpecialization(
        name="Nap√°danie",
        description="–ê–≥—Ä–µ—Å–∏–≤–Ω–æ –æ—Ç–Ω–µ–º–∞–Ω–µ –Ω–∞ —à–∞–π–±–∞—Ç–∞ –≤ —á—É–∂–¥–∞—Ç–∞ –∑–æ–Ω–∞", 
        requirements={'str_': 0.4, 'spe': 0.3, 'att': 0.3}
    ),
    'short_passes': TacticalSpecialization(
        name="Kr√°tke nahr√°vky",
        description="–ë—ä—Ä–∑–∏ –∫—Ä–∞—Ç–∫–∏ –ø–æ–¥–∞–≤–∞–Ω–∏—è –≤ –∞—Ç–∞–∫–∞",
        requirements={'pas': 0.5, 'spe': 0.3, 'att': 0.2}
    ),
    'defensive_checking': TacticalSpecialization(
        name="Obrana (checking)",
        description="–§–æ–∫—É—Å —Å–∞–º–æ –≤—ä—Ä—Ö—É –∑–∞—â–∏—Ç–∞—Ç–∞",
        requirements={'def_': 0.6, 'str_': 0.3, 'dis': 0.1}
    ),
    'blue_line_shots': TacticalSpecialization(
        name="Streƒæba od modrej",
        description="–°—Ç—Ä–µ–ª–±–∏ –æ—Ç –∑–∞—â–∏—Ç–Ω–∏—Ü–∏—Ç–µ –æ—Ç —Å–∏–Ω—è—Ç–∞ –ª–∏–Ω–∏—è",
        requirements={'sho': 0.4, 'str_': 0.3, 'pas': 0.3}
    ),
    'behind_net_passes': TacticalSpecialization(
        name="Nahr√°vky spoza br√°ny", 
        description="–¶–µ–Ω—Ç—Ä–æ–≤–µ—Ç–µ –¥–∞–≤–∞—Ç –≥–æ–ª–æ–≤–∏ –ø–æ–¥–∞–≤–∞–Ω–∏—è –æ—Ç–∑–∞–¥ –≤—Ä–∞—Ç–∞—Ç–∞",
        requirements={'pas': 0.5, 'att': 0.3, 'spe': 0.2}
    )
}

class GameGuideAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ"""
    
    def __init__(self):
        self.guide_data = {}
        self.guide_urls = [
            'https://www.ha-navod.eu/index.php?navod=novinky_informacie',
            'https://www.ha-navod.eu/index.php?navod=karta_muzstva',
            'https://www.ha-navod.eu/index.php?navod=zakladne_atributy',
            'https://www.ha-navod.eu/index.php?navod=dalsie_atributy',
            'https://www.ha-navod.eu/index.php?navod=takticke_moznosti',
            'https://www.ha-navod.eu/index.php?navod=trening',
            'https://www.ha-navod.eu/index.php?navod=statistiky',
            'https://www.ha-navod.eu/index.php?navod=nastavenie_zostavy',
            'https://www.ha-navod.eu/index.php?navod=zohranost_formacie'
        ]
        
    def analyze_official_guide(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ"""
        logger.info("üìö Analyzing official Hockey Arena guide...")
        
        guide_knowledge = {
            'attributes': {},
            'tactics': {},
            'training': {},
            'team_management': {},
            'game_mechanics': {}
        }
        
        try:
            for url in self.guide_urls:
                try:
                    response = requests.get(url, timeout=10)
                    if response.status_code == 200:
                        soup = BeautifulSoup(response.content, 'html.parser')
                        content = soup.get_text()
                        
                        # –ò–∑–≤–ª–∏—á–∞–º–µ –∫–ª—é—á–æ–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        if 'atributy' in url:
                            guide_knowledge['attributes'] = self._extract_attributes_info(content)
                        elif 'takticke' in url:
                            guide_knowledge['tactics'] = self._extract_tactics_info(content)
                        elif 'trening' in url:
                            guide_knowledge['training'] = self._extract_training_info(content)
                        
                        time.sleep(1)  # –£–≤–∞–∂–∞–≤–∞–º–µ —Å—ä—Ä–≤—ä—Ä–∞
                        
                except Exception as e:
                    logger.warning(f"Failed to fetch guide page {url}: {e}")
                    continue
            
            self.guide_data = guide_knowledge
            logger.info("‚úÖ Official guide analysis completed")
            return guide_knowledge
            
        except Exception as e:
            logger.error(f"Error analyzing official guide: {e}")
            return {}
    
    def _extract_attributes_info(self, content: str) -> Dict:
        """–ò–∑–≤–ª–∏—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∞—Ç—Ä–∏–±—É—Ç–∏—Ç–µ"""
        return {
            'primary_attributes': ['Br√°na', 'Obrana', '√ötok', 'Streƒæba', 'Nahr√°vka', 'Sila', 'R√Ωchlos≈•', 'Sebaovl√°danie'],
            'goalkeeper_focus': ['Br√°na', 'R√Ωchlos≈•', 'Nahr√°vka'],
            'defender_focus': ['Obrana', 'Sila', 'R√Ωchlos≈•'],
            'forward_focus': ['√ötok', 'Streƒæba', 'Nahr√°vka'],
            'center_focus': ['Nahr√°vka', '√ötok', 'Sila']
        }
    
    def _extract_tactics_info(self, content: str) -> Dict:
        """–ò–∑–≤–ª–∏—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ç–∞–∫—Ç–∏–∫–∏—Ç–µ"""
        return {
            'available_tactics': list(TACTICAL_SPECIALIZATIONS.keys()),
            'formation_chemistry': True,
            'aggressive_play_risks': True
        }
    
    def _extract_training_info(self, content: str) -> Dict:
        """–ò–∑–≤–ª–∏—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏—Ç–µ"""
        return {
            'energy_management': True,
            'form_factors': ['rest', 'performance', 'red_hand'],
            'experience_gain': 'matches_only'
        }

class BraveBrowserSimulator:
    """–¢–æ—á–µ–Ω —Å–∏–º—É–ª–∞—Ç–æ—Ä –Ω–∞ Brave –±—Ä–∞—É–∑—ä—Ä"""
    
    @staticmethod
    def get_brave_headers() -> Dict[str, str]:
        """–í—Ä—ä—â–∞ —Ç–æ—á–Ω–∏ Brave –±—Ä–∞—É–∑—ä—Ä headers"""
        return {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Accept-Language': 'bg-BG,bg;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-User': '?1',
            'Cache-Control': 'max-age=0',
            'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Brave";v="120"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"',
            'Sec-GPC': '1'  # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –∑–∞ Brave
        }

class HumanBehaviorEngine:
    """–î–≤–∏–≥–∞—Ç–µ–ª –∑–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ —á–æ–≤–µ—à–∫–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"""
    
    def __init__(self):
        self.session_start = time.time()
        self.pages_visited = 0
        self.last_action_time = time.time()
        self.browsing_pattern = self._generate_browsing_pattern()
    
    def _generate_browsing_pattern(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ —É–Ω–∏–∫–∞–ª–µ–Ω –º–æ–¥–µ–ª –Ω–∞ —Å—ä—Ä—Ñ–∏—Ä–∞–Ω–µ"""
        return {
            'reading_speed': random.uniform(200, 350),  # –¥—É–º–∏/–º–∏–Ω—É—Ç–∞
            'attention_span': random.uniform(30, 120),  # —Å–µ–∫—É–Ω–¥–∏
            'curiosity_level': random.uniform(0.1, 0.4),  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ —Å–ª—É—á–∞–π–Ω–æ –∫–ª–∏–∫–≤–∞–Ω–µ
            'fatigue_rate': random.uniform(0.1, 0.3)  # –∫–æ–ª–∫–æ –±—ä—Ä–∑–æ —Å–µ —É–º–æ—Ä—è–≤–∞
        }
    
    def realistic_delay(self, min_seconds: float = 2.0, max_seconds: float = 8.0):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–µ–Ω delay —Å —á–æ–≤–µ—à–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–∏"""
        base_delay = random.uniform(min_seconds, max_seconds)
        
        # –§–∞–∫—Ç–æ—Ä –Ω–∞ —É–º–æ—Ä–∞
        session_time = time.time() - self.session_start
        fatigue_factor = 1 + (session_time / 3600) * self.browsing_pattern['fatigue_rate']
        base_delay *= fatigue_factor
        
        # –°–ª—É—á–∞–π–Ω–∏ "–º–∏—Å–ª–æ–≤–Ω–∏" –ø–∞—É–∑–∏
        if random.random() < 0.15:
            base_delay += random.uniform(3.0, 12.0)
            logger.debug("ü§î Deep thinking pause...")
        
        # –ú–∏–∫—Ä–æ –ø–∞—É–∑–∏ –∑–∞ "—á–µ—Ç–µ–Ω–µ"
        if random.random() < 0.4:
            base_delay += random.uniform(0.5, 2.5)
        
        logger.debug(f"üí§ Human delay: {base_delay:.1f}s")
        time.sleep(base_delay)
        
        self.pages_visited += 1
        self.last_action_time = time.time()
    
    def simulate_page_reading(self, content_length: int):
        """–°–∏–º—É–ª–∏—Ä–∞ —á–µ—Ç–µ–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        words_estimate = content_length / 5
        reading_time = (words_estimate / self.browsing_pattern['reading_speed']) * 60
        
        # –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ
        reading_time = max(1.0, min(reading_time, self.browsing_pattern['attention_span']))
        
        # –î–æ–±–∞–≤—è–º–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç
        actual_time = reading_time * random.uniform(0.3, 1.8)
        
        logger.debug(f"üìñ Reading simulation: {actual_time:.1f}s")
        time.sleep(actual_time)
    
    def should_explore_randomly(self) -> bool:
        """–†–µ—à–∞–≤–∞ –¥–∞–ª–∏ –¥–∞ –Ω–∞–ø—Ä–∞–≤–∏ —Å–ª—É—á–∞–π–Ω–æ —Ä–∞–∑–≥–ª–µ–∂–¥–∞–Ω–µ"""
        return random.random() < self.browsing_pattern['curiosity_level']

class OpponentIntelligence:
    """–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏"""
    
    def __init__(self, session, base_url: str):
        self.session = session
        self.base_url = base_url
        self.opponent_cache = {}
        
    def analyze_opponent(self, opponent_name: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å AI –ø—Ä–µ–¥–≤–∏–∂–¥–∞–Ω–∏—è"""
        logger.info(f"üéØ Analyzing opponent: {opponent_name}")
        
        if opponent_name in self.opponent_cache:
            return self.opponent_cache[opponent_name]
        
        try:
            # –°—ä–±–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏ –∑–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            opponent_data = self._gather_opponent_data(opponent_name)
            
            # AI –∞–Ω–∞–ª–∏–∑
            analysis = {
                'name': opponent_name,
                'strength_rating': self._calculate_team_strength(opponent_data),
                'tactical_tendency': self._predict_tactics(opponent_data),
                'key_players': self._identify_key_players(opponent_data),
                'weaknesses': self._find_weaknesses(opponent_data),
                'strengths': self._find_strengths(opponent_data),
                'win_probability': 0.0,
                'recommended_tactics': {},
                'match_instructions': []
            }
            
            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ –ø–æ–±–µ–¥–∞
            analysis['win_probability'] = self._calculate_win_probability(analysis)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
            analysis['recommended_tactics'] = self._generate_counter_tactics(analysis)
            analysis['match_instructions'] = self._generate_match_instructions(analysis)
            
            self.opponent_cache[opponent_name] = analysis
            logger.info(f"‚úÖ Opponent analysis complete: {opponent_name}")
            
            return analysis
            
        except Exception as e:
            logger.error(f"Failed to analyze opponent {opponent_name}: {e}")
            return {'name': opponent_name, 'error': str(e)}
    
    def _gather_opponent_data(self, opponent_name: str) -> Dict:
        """–°—ä–±–∏—Ä–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω–∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏"""
        data = {
            'league_position': None,
            'recent_results': [],
            'estimated_players': [],
            'tactical_patterns': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ—Ç–æ
        try:
            standings_url = f"{self.base_url}/public_standings.inc"
            response = self.session.get(standings_url)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            data['league_position'] = self._find_team_in_standings(soup, opponent_name)
            
        except Exception as e:
            logger.warning(f"Could not get standings data: {e}")
        
        return data
    
    def _find_team_in_standings(self, soup: BeautifulSoup, team_name: str) -> Dict:
        """–ù–∞–º–∏—Ä–∞ –æ—Ç–±–æ—Ä–∞ –≤ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ—Ç–æ"""
        for table in soup.find_all('table'):
            for row in table.find_all('tr'):
                cells = row.find_all(['td', 'th'])
                for cell in cells:
                    if team_name.lower() in cell.get_text().lower():
                        # –ò–∑–≤–ª–∏—á–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç —Ä–µ–¥–∞
                        row_data = [c.get_text().strip() for c in cells]
                        return {
                            'position': row_data[0] if row_data else 'Unknown',
                            'points': row_data[2] if len(row_data) > 2 else '0',
                            'goals_for': row_data[3] if len(row_data) > 3 else '0',
                            'goals_against': row_data[4] if len(row_data) > 4 else '0'
                        }
        return {}
    
    def _calculate_team_strength(self, data: Dict) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ —Å–∏–ª–∞—Ç–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∞"""
        base_strength = 50.0
        
        league_pos = data.get('league_position', {})
        if league_pos:
            try:
                position = int(re.search(r'\d+', league_pos.get('position', '10')).group())
                # –ü–æ-–Ω–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏—è = –ø–æ-—Å–∏–ª–µ–Ω –æ—Ç–±–æ—Ä
                position_factor = max(0, (20 - position) * 2.5)
                base_strength += position_factor
            except:
                pass
        
        return min(100, max(0, base_strength))
    
    def _predict_tactics(self, data: Dict) -> str:
        """–ü—Ä–µ–¥–≤–∏–∂–¥–∞ —Ç–∞–∫—Ç–∏–∫–∞—Ç–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"""
        league_pos = data.get('league_position', {})
        
        if league_pos:
            try:
                goals_for = int(league_pos.get('goals_for', '0'))
                goals_against = int(league_pos.get('goals_against', '0'))
                
                if goals_for > goals_against * 1.2:
                    return 'offensive'
                elif goals_against > goals_for * 1.2:
                    return 'defensive'
                else:
                    return 'balanced'
            except:
                pass
        
        return 'unknown'
    
    def _identify_key_players(self, data: Dict) -> List[str]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞ –∫–ª—é—á–æ–≤–∏—Ç–µ –∏–≥—Ä–∞—á–∏"""
        # –í —Ä–µ–∞–ª–Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—è —Ç–æ–≤–∞ —â–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–Ω–∏ –¥–∞–Ω–Ω–∏
        return ['Unknown Player 1', 'Unknown Player 2']
    
    def _find_weaknesses(self, data: Dict) -> List[str]:
        """–ù–∞–º–∏—Ä–∞ —Å–ª–∞–±–æ—Å—Ç–∏—Ç–µ –Ω–∞ –æ—Ç–±–æ—Ä–∞"""
        weaknesses = []
        
        tactical_tendency = self._predict_tactics(data)
        
        if tactical_tendency == 'offensive':
            weaknesses.append('–£—è–∑–≤–∏–º–∞ –∑–∞—â–∏—Ç–∞ –ø—Ä–∏ –∫–æ–Ω—Ç—Ä–∞–∞—Ç–∞–∫–∏')
        elif tactical_tendency == 'defensive':
            weaknesses.append('–°–ª–∞–±–∏ –≤ –∞—Ç–∞–∫–∞ –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è')
        
        # –î–æ–±–∞–≤—è–º–µ –æ–±—â–∏ —Å–ª–∞–±–æ—Å—Ç–∏ –±–∞–∑–∏—Ä–∞–Ω–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ç–∞
        league_pos = data.get('league_position', {})
        if league_pos:
            try:
                position = int(re.search(r'\d+', league_pos.get('position', '10')).group())
                if position > 10:
                    weaknesses.append('–û–±—â–æ —Å–ª–∞–± –æ—Ç–±–æ—Ä')
                    weaknesses.append('–ù–µ–æ–ø–∏—Ç–Ω–∏ –∏–≥—Ä–∞—á–∏')
            except:
                pass
        
        return weaknesses
    
    def _find_strengths(self, data: Dict) -> List[str]:
        """–ù–∞–º–∏—Ä–∞ —Å–∏–ª–Ω–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏ –Ω–∞ –æ—Ç–±–æ—Ä–∞"""
        strengths = []
        
        tactical_tendency = self._predict_tactics(data)
        
        if tactical_tendency == 'offensive':
            strengths.append('–°–∏–ª–Ω–∞ –∞—Ç–∞–∫–∞ –∏ —Å–∫–æ—Ä–∏—Ä–∞–Ω–µ')
        elif tactical_tendency == 'defensive':
            strengths.append('–°—Ç–∞–±–∏–ª–Ω–∞ –∑–∞—â–∏—Ç–∞')
        
        league_pos = data.get('league_position', {})
        if league_pos:
            try:
                position = int(re.search(r'\d+', league_pos.get('position', '10')).group())
                if position <= 5:
                    strengths.append('–¢–æ–ø –æ—Ç–±–æ—Ä –≤ –ª–∏–≥–∞—Ç–∞')
                    strengths.append('–û–ø–∏—Ç–Ω–∏ –∏–≥—Ä–∞—á–∏')
            except:
                pass
        
        return strengths
    
    def _calculate_win_probability(self, analysis: Dict) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ –ø–æ–±–µ–¥–∞"""
        base_prob = 50.0
        
        # –ö–æ—Ä–µ–∫—Ü–∏—è —Å–ø–æ—Ä–µ–¥ —Å–∏–ª–∞—Ç–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        opponent_strength = analysis.get('strength_rating', 50)
        our_strength = 55.0  # –ü—Ä–∏–µ–º–∞–º–µ, —á–µ —Å–º–µ –º–∞–ª–∫–æ –ø–æ-—Å–∏–ª–Ω–∏
        
        strength_diff = our_strength - opponent_strength
        probability = base_prob + (strength_diff * 0.8)
        
        return max(5, min(95, probability))
    
    def _generate_counter_tactics(self, analysis: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ –∫–æ–Ω—Ç—Ä–∞-—Ç–∞–∫—Ç–∏–∫–∏"""
        tactics = {}
        
        opponent_tendency = analysis.get('tactical_tendency', 'unknown')
        
        if opponent_tendency == 'offensive':
            tactics['recommended_formation'] = 'defensive'
            tactics['focus'] = 'counter_attacks'
            tactics['specialization'] = 'counter_attacks'
        elif opponent_tendency == 'defensive':
            tactics['recommended_formation'] = 'offensive' 
            tactics['focus'] = 'break_defense'
            tactics['specialization'] = 'short_passes'
        else:
            tactics['recommended_formation'] = 'balanced'
            tactics['focus'] = 'adapt'
            tactics['specialization'] = 'flexible'
        
        return tactics
    
    def _generate_match_instructions(self, analysis: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞ –º–∞—á–∞"""
        instructions = []
        
        weaknesses = analysis.get('weaknesses', [])
        strengths = analysis.get('strengths', [])
        win_prob = analysis.get('win_probability', 50)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–∞–∑–∏—Ä–∞–Ω–∏ –Ω–∞ —Å–ª–∞–±–æ—Å—Ç–∏—Ç–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        for weakness in weaknesses:
            if '–∑–∞—â–∏—Ç–∞' in weakness.lower():
                instructions.append('üî• –ê–¢–ê–ö–£–í–ê–ô–¢–ï –ê–ì–†–ï–°–ò–í–ù–û - –∑–∞—â–∏—Ç–∞—Ç–∞ –∏–º –µ —Å–ª–∞–±–∞!')
            elif '–∞—Ç–∞–∫–∞' in weakness.lower():
                instructions.append('üõ°Ô∏è –ò–≥—Ä–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª–Ω–æ –≤ –∑–∞—â–∏—Ç–∞ - —Ç–µ —Å–∞ —Å–ª–∞–±–∏ –≤ –∞—Ç–∞–∫–∞')
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ —Å–∏–ª–Ω–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏
        for strength in strengths:
            if '–∞—Ç–∞–∫–∞' in strength.lower():
                instructions.append('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –°–∏–ª–Ω–∞ –∞—Ç–∞–∫–∞ - –∏–≥—Ä–∞–π—Ç–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ')
            elif '–∑–∞—â–∏—Ç–∞' in strength.lower():
                instructions.append('üéØ –¢—ä—Ä—Å–µ—Ç–µ —Ä—è–¥–∫–∏ –º–æ–º–µ–Ω—Ç–∏ - –∑–∞—â–∏—Ç–∞—Ç–∞ –∏–º –µ —Å—Ç–∞–±–∏–ª–Ω–∞')
        
        # –û–±—â–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ø–æ—Ä–µ–¥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—Ç–∞
        if win_prob > 70:
            instructions.append('üí™ –ò–º–∞–º–µ –æ—Ç–ª–∏—á–Ω–∏ —à–∞–Ω—Å–æ–≤–µ - –∏–≥—Ä–∞–π—Ç–µ —Å —É–≤–µ—Ä–µ–Ω–æ—Å—Ç!')
        elif win_prob < 30:
            instructions.append('ü•ä –¢—Ä—É–¥–µ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ - –¥–∞–π—Ç–µ –º–∞–∫—Å–∏–º—É–º–∞!')
        
        return instructions

class TacticalOptimizer:
    """AI –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –Ω–∞ —Ç–∞–∫—Ç–∏–∫–∏ –±–∞–∑–∏—Ä–∞–Ω –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ"""
    
    def __init__(self, guide_data: Dict = None):
        self.guide_data = guide_data or {}
        self.formations = {
            '1-4-1': {'def': 0.7, 'att': 0.5, 'balance': 0.8},
            '1-3-2': {'def': 0.6, 'att': 0.7, 'balance': 0.7},
            '1-2-3': {'def': 0.4, 'att': 0.9, 'balance': 0.5}
        }
    
    def optimize_lineup_and_tactics(self, our_players: List[PlayerStats], 
                                  opponent_analysis: Dict) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞ —Å—ä—Å—Ç–∞–≤–∞ –∏ —Ç–∞–∫—Ç–∏–∫–∏—Ç–µ"""
        
        logger.info("‚ö° Optimizing lineup and tactics...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –Ω–∞—à–∏—Ç–µ –∏–≥—Ä–∞—á–∏
        team_analysis = self._analyze_our_team(our_players)
        
        # –ò–∑–±–∏—Ä–∞–º–µ –Ω–∞–π-–¥–æ–±—Ä–∏—Ç–µ –∏–≥—Ä–∞—á–∏ –∑–∞ –≤—Å—è–∫–∞ –ø–æ–∑–∏—Ü–∏—è
        optimal_lineup = self._select_optimal_lineup(our_players)
        
        # –ò–∑–±–∏—Ä–∞–º–µ –Ω–∞–π-–¥–æ–±—Ä–∞—Ç–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        best_specialization = self._choose_specialization(team_analysis, opponent_analysis)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        match_setup = self._create_match_setup(optimal_lineup, best_specialization, opponent_analysis)
        
        return {
            'lineup': optimal_lineup,
            'specialization': best_specialization,
            'formation': match_setup['formation'],
            'instructions': match_setup['instructions'],
            'energy_management': match_setup['energy_management'],
            'substitution_plan': match_setup['substitutions']
        }
    
    def _analyze_our_team(self, players: List[PlayerStats]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –Ω–∞—à–∏—è –æ—Ç–±–æ—Ä"""
        analysis = {
            'total_players': len(players),
            'position_strength': {},
            'average_attributes': {},
            'team_character': ''
        }
        
        # –ì—Ä—É–ø–∏—Ä–∞–º–µ –∏–≥—Ä–∞—á–∏—Ç–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        positions = {'goalkeeper': [], 'defender': [], 'center': [], 'forward': []}
        
        for player in players:
            # –û–ø—Ä–µ–¥–µ–ª—è–º–µ –Ω–∞–π-–¥–æ–±—Ä–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –∑–∞ –≤—Å–µ–∫–∏ –∏–≥—Ä–∞—á
            best_pos = self._determine_best_position(player)
            if best_pos in positions:
                positions[best_pos].append(player)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å–∏–ª–∞—Ç–∞ –Ω–∞ –≤—Å—è–∫–∞ –ø–æ–∑–∏—Ü–∏—è
        for pos, pos_players in positions.items():
            if pos_players:
                avg_rating = sum(p.calculate_position_rating(pos) for p in pos_players) / len(pos_players)
                analysis['position_strength'][pos] = {
                    'average_rating': avg_rating,
                    'player_count': len(pos_players),
                    'depth': 'good' if len(pos_players) >= 3 else 'limited'
                }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–º–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∞
        all_ratings = [p.calculate_position_rating('forward') for p in players]
        avg_team_rating = sum(all_ratings) / len(all_ratings) if all_ratings else 0
        
        if avg_team_rating > 70:
            analysis['team_character'] = 'elite'
        elif avg_team_rating > 55:
            analysis['team_character'] = 'competitive'  
        else:
            analysis['team_character'] = 'developing'
        
        return analysis
    
    def _determine_best_position(self, player: PlayerStats) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è –Ω–∞–π-–¥–æ–±—Ä–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –∑–∞ –∏–≥—Ä–∞—á"""
        ratings = {
            'goalkeeper': player.calculate_position_rating('goalkeeper'),
            'defender': player.calculate_position_rating('defender'), 
            'center': player.calculate_position_rating('center'),
            'forward': player.calculate_position_rating('forward')
        }
        
        return max(ratings, key=ratings.get)
    
    def _select_optimal_lineup(self, players: List[PlayerStats]) -> Dict:
        """–ò–∑–±–∏—Ä–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–∏—è —Å—ä—Å—Ç–∞–≤"""
        lineup = {
            'goalkeeper': None,
            'defenders': [],
            'centers': [],
            'forwards': []
        }
        
        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –∏–≥—Ä–∞—á–∏—Ç–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –≤—Å—è–∫–∞ –ø–æ–∑–∏—Ü–∏—è
        for pos in ['goalkeeper', 'defender', 'center', 'forward']:
            pos_players = [(p, p.calculate_position_rating(pos)) for p in players]
            pos_players.sort(key=lambda x: x[1], reverse=True)
            
            if pos == 'goalkeeper':
                if pos_players:
                    lineup['goalkeeper'] = pos_players[0][0]
            elif pos == 'defender':
                lineup['defenders'] = [p[0] for p in pos_players[:4]]
            elif pos == 'center':
                lineup['centers'] = [p[0] for p in pos_players[:2]]
            else:  # forward
                lineup['forwards'] = [p[0] for p in pos_players[:4]]
        
        return lineup
    
    def _choose_specialization(self, team_analysis: Dict, opponent_analysis: Dict) -> str:
        """–ò–∑–±–∏—Ä–∞ –Ω–∞–π-–¥–æ–±—Ä–∞—Ç–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        
        opponent_tendency = opponent_analysis.get('tactical_tendency', 'unknown')
        team_character = team_analysis.get('team_character', 'developing')
        
        # –õ–æ–≥–∏–∫–∞ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if opponent_tendency == 'offensive':
            # –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫—ä—Ç –∞—Ç–∞–∫—É–≤–∞ –º–Ω–æ–≥–æ - –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –∫–æ–Ω—Ç—Ä–∞–∞—Ç–∞–∫–∏
            return 'counter_attacks'
        elif opponent_tendency == 'defensive':
            # –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫—ä—Ç —Å–µ –∑–∞—â–∏—Ç–∞–≤–∞ - –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –∫—Ä–∞—Ç–∫–∏ –ø–æ–¥–∞–≤–∞–Ω–∏—è
            return 'short_passes'
        elif team_character == 'elite':
            # –°–∏–ª–µ–Ω –æ—Ç–±–æ—Ä - –º–æ–∂–µ–º –¥–∞ –∏–≥—Ä–∞–µ–º –∞–≥—Ä–µ—Å–∏–≤–Ω–æ
            return 'forechecking'
        else:
            # –ü–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ balance
            return 'hura_system'
    
    def _create_match_setup(self, lineup: Dict, specialization: str, opponent_analysis: Dict) -> Dict:
        """–°—ä–∑–¥–∞–≤–∞ –ø—ä–ª–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞ –º–∞—á–∞"""
        
        setup = {
            'formation': '1-3-2',  # –ë–∞–ª–∞–Ω—Å–∏—Ä–∞–Ω–∞ —Ñ–æ—Ä–º–∞—Ü–∏—è
            'instructions': [],
            'energy_management': {},
            'substitutions': []
        }
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ø–æ—Ä–µ–¥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞
        spec_data = TACTICAL_SPECIALIZATIONS.get(specialization)
        if spec_data:
            setup['instructions'].append(f"üéØ –¢–∞–∫—Ç–∏–∫–∞: {spec_data.name}")
            setup['instructions'].append(f"üìã {spec_data.description}")
        
        # –ï–Ω–µ—Ä–≥–∏–µ–Ω –º–µ–Ω–∏–¥–∂–º—ä–Ω—Ç
        setup['energy_management'] = {
            'rotation_needed': True,
            'rest_key_players': ['goalkeeper'],
            'high_intensity_limit': 3  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ –º–∞—á–∞ —Å –≤–∏—Å–æ–∫–∞ –∏–Ω—Ç–µ–Ω–∑–∏–≤–Ω–æ—Å—Ç
        }
        
        # –ü–ª–∞–Ω –∑–∞ –∑–∞–º–µ—Å—Ç–≤–∞–Ω–∏—è—Ç–∞
        setup['substitutions'] = [
            '–°–º–µ–Ω–µ—Ç–µ —É–º–æ—Ä–µ–Ω–∏—Ç–µ –∏–≥—Ä–∞—á–∏ –≤ 40-—Ç–∞ –º–∏–Ω—É—Ç–∞',
            '–ü—Ä–∏ –≤–æ–¥–µ–Ω–µ —Å 2+ –≥–æ–ª–∞ –∏–≥—Ä–∞–π—Ç–µ –ø–æ-–¥–µ—Ñ–∞–Ω–∑–∏–≤–Ω–æ',
            '–ü—Ä–∏ –∏–∑–æ—Å—Ç–∞–≤–∞–Ω–µ –∏–≥—Ä–∞–π—Ç–µ –ø–æ-–∞–≥—Ä–µ—Å–∏–≤–Ω–æ'
        ]
        
        return setup

class HockeyArenaGUI:
    """–ì–ª–∞–≤–Ω–∞ –≥—Ä–∞—Ñ–∏—á–Ω–∞ —Å—Ä–µ–¥–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üèí Hockey Arena Master AI v4.0")
        self.root.geometry("1600x1000")
        self.root.configure(bg='#0d1117')
        
        # –°—Ç–∏–ª–∏–∑–∏—Ä–∞–Ω–µ
        self.setup_styles()
        
        # –°–∏—Å—Ç–µ–º–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        self.analyzer = None
        self.guide_analyzer = GameGuideAnalyzer()
        self.running = False
        self.analysis_thread = None
        
        # –î–∞–Ω–Ω–∏
        self.our_players = []
        self.opponents_data = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ GUI
        self.setup_gui()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ—Ç–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ
        self.analyze_official_guide()
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–≤–∞ —Å—Ç–∏–ª–æ–≤–µ—Ç–µ"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # –¢—ä–º–Ω–∞ —Ç–µ–º–∞
        self.style.configure('Title.TLabel', 
                           font=('Segoe UI', 18, 'bold'),
                           background='#0d1117',
                           foreground='#f0f6fc')
        
        self.style.configure('Subtitle.TLabel',
                           font=('Segoe UI', 12, 'bold'),
                           background='#0d1117', 
                           foreground='#7c3aed')
        
        self.style.configure('Success.TLabel',
                           foreground='#238636')
        
        self.style.configure('Error.TLabel',
                           foreground='#da3633')
        
        self.style.configure('Warning.TLabel',
                           foreground='#fb8500')
        
        self.style.configure('Custom.TButton',
                           font=('Segoe UI', 10, 'bold'))
    
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–≤–∞ –æ—Å–Ω–æ–≤–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –ì–ª–∞–≤–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–ª–∞–≤–∏–µ
        title_frame = ttk.Frame(main_frame)
        title_frame.pack(fill=tk.X, pady=(0, 10))
        
        title_label = ttk.Label(title_frame, 
                               text="üèí Hockey Arena Master AI v4.0", 
                               style='Title.TLabel')
        title_label.pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.status_indicator = ttk.Label(title_frame, 
                                        text="üî¥ Offline", 
                                        style='Error.TLabel')
        self.status_indicator.pack(side=tk.RIGHT)
        
        # Notebook –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ —Å–µ–∫—Ü–∏–∏
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ç–∞–±–æ–≤–µ—Ç–µ
        self.setup_dashboard_tab()
        self.setup_login_tab()
        self.setup_team_analysis_tab()
        self.setup_opponent_analysis_tab()
        self.setup_tactics_tab()
        self.setup_match_preparation_tab()
        self.setup_guide_tab()
        self.setup_logs_tab()
        self.setup_settings_tab()
    
    def setup_dashboard_tab(self):
        """–ì–ª–∞–≤–µ–Ω dashboard"""
        dashboard_frame = ttk.Frame(self.notebook)
        self.notebook.add(dashboard_frame, text="üìä Dashboard")
        
        # –ë—ä—Ä–∑–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = ttk.LabelFrame(dashboard_frame, text="üèÜ Quick Stats", padding=10)
        stats_frame.pack(fill=tk.X, pady=5)
        
        self.stats_labels = {
            'team_rating': ttk.Label(stats_frame, text="Team Rating: --"),
            'next_opponent': ttk.Label(stats_frame, text="Next Opponent: --"),
            'win_probability': ttk.Label(stats_frame, text="Win Probability: --%"),
            'recommended_tactic': ttk.Label(stats_frame, text="Recommended Tactic: --")
        }
        
        for i, (key, label) in enumerate(self.stats_labels.items()):
            label.grid(row=0, column=i, padx=20, sticky=tk.W)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ —Å–µ–∫—Ü–∏—è
        if CHARTS_AVAILABLE:
            self.setup_charts_section(dashboard_frame)
        
        # –ë—ä—Ä–∑–∏ –¥–µ–π—Å—Ç–≤–∏—è
        actions_frame = ttk.LabelFrame(dashboard_frame, text="‚ö° Quick Actions", padding=10)
        actions_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(actions_frame, text="üîÑ Refresh Analysis", 
                  command=self.refresh_analysis).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(actions_frame, text="üéØ Analyze Next Opponent", 
                  command=self.analyze_next_opponent).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(actions_frame, text="üìã Export Report", 
                  command=self.export_comprehensive_report).pack(side=tk.LEFT, padx=5)
    
    def setup_charts_section(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–≤–∞ —Å–µ–∫—Ü–∏—è—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∏"""
        charts_frame = ttk.LabelFrame(parent, text="üìà Visual Analysis", padding=10)
        charts_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Matplotlib canvas
        self.fig, ((self.ax1, self.ax2), (self.ax3, self.ax4)) = plt.subplots(2, 2, figsize=(12, 8))
        self.fig.patch.set_facecolor('#0d1117')
        
        for ax in [self.ax1, self.ax2, self.ax3, self.ax4]:
            ax.set_facecolor('#161b22')
        
        self.canvas = FigureCanvasTkAgg(self.fig, charts_frame)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        self.update_charts()
    
    def setup_login_tab(self):
        """–¢–∞–± –∑–∞ –ª–æ–≥–≤–∞–Ω–µ"""
        login_frame = ttk.Frame(self.notebook)
        self.notebook.add(login_frame, text="üîê Login & Analysis")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ
        center_frame = ttk.Frame(login_frame)
        center_frame.pack(expand=True)
        
        # Logo –∏ –∑–∞–≥–ª–∞–≤–∏–µ
        ttk.Label(center_frame, text="üèí", font=('Segoe UI', 48)).pack(pady=10)
        ttk.Label(center_frame, text="Hockey Arena Master AI", 
                 style='Title.TLabel').pack(pady=5)
        ttk.Label(center_frame, text="–ù–∞–π-–Ω–∞–ø—Ä–µ–¥–Ω–∞–ª–∞—Ç–∞ AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞ –¥–æ–º–∏–Ω–∏—Ä–∞–Ω–µ", 
                 style='Subtitle.TLabel').pack(pady=5)
        
        # Credential –ø–æ–ª–µ—Ç–∞
        creds_frame = ttk.LabelFrame(center_frame, text="–î–∞–Ω–Ω–∏ –∑–∞ –¥–æ—Å—Ç—ä–ø", padding=20)
        creds_frame.pack(pady=20)
        
        ttk.Label(creds_frame, text="Username:", font=('Segoe UI', 12)).pack(anchor=tk.W)
        self.username_entry = ttk.Entry(creds_frame, width=30, font=('Segoe UI', 12))
        self.username_entry.pack(pady=5, fill=tk.X)
        
        ttk.Label(creds_frame, text="Password:", font=('Segoe UI', 12)).pack(anchor=tk.W, pady=(10,0))
        self.password_entry = ttk.Entry(creds_frame, width=30, show="*", font=('Segoe UI', 12))
        self.password_entry.pack(pady=5, fill=tk.X)
        
        # Login –±—É—Ç–æ–Ω
        self.login_button = ttk.Button(creds_frame, 
                                      text="üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ AI –ê–Ω–∞–ª–∏–∑",
                                      command=self.start_comprehensive_analysis,
                                      style='Custom.TButton')
        self.login_button.pack(pady=20, fill=tk.X)
        
        # Status –∏ progress
        self.login_status_label = ttk.Label(center_frame, text="–ì–æ—Ç–æ–≤ –∑–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ...")
        self.login_status_label.pack(pady=5)
        
        self.progress = ttk.Progressbar(center_frame, mode='indeterminate', length=400)
        self.progress.pack(pady=10)
        
        # –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –æ–ø—Ü–∏–∏
        options_frame = ttk.LabelFrame(center_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –∞–Ω–∞–ª–∏–∑", padding=10)
        options_frame.pack(pady=10)
        
        self.deep_analysis_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–î—ä–ª–±–æ–∫ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏", 
                       variable=self.deep_analysis_var).pack(anchor=tk.W)
        
        self.auto_tactics_var = tk.BooleanVar(value=True) 
        ttk.Checkbutton(options_frame, text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏",
                       variable=self.auto_tactics_var).pack(anchor=tk.W)
    
    def setup_team_analysis_tab(self):
        """–¢–∞–± –∑–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Ç–±–æ—Ä–∞"""
        team_frame = ttk.Frame(self.notebook)
        self.notebook.add(team_frame, text="üë• Team Analysis")
        
        # –î–≤–∞ —Å—Ç—ä–ª–±–∞
        left_frame = ttk.Frame(team_frame)
        right_frame = ttk.Frame(team_frame)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        # –õ—è–≤–∞ —Å—Ç—Ä–∞–Ω–∞ - –æ–±—â–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = ttk.LabelFrame(left_frame, text="‚ÑπÔ∏è Team Information", padding=10)
        info_frame.pack(fill=tk.X, pady=5)
        
        self.team_info_text = scrolledtext.ScrolledText(info_frame, height=8, width=50)
        self.team_info_text.pack(fill=tk.BOTH, expand=True)
        
        # –ò–≥—Ä–∞—á–∏ –∞–Ω–∞–ª–∏–∑
        players_frame = ttk.LabelFrame(left_frame, text="üë§ Players Analysis", padding=10)
        players_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.players_tree = ttk.Treeview(players_frame, columns=('Position', 'Rating', 'Age', 'Form'), show='tree headings')
        self.players_tree.heading('#0', text='Name')
        self.players_tree.heading('Position', text='Best Position')
        self.players_tree.heading('Rating', text='Rating')
        self.players_tree.heading('Age', text='Age')
        self.players_tree.heading('Form', text='Form')
        
        scrollbar_players = ttk.Scrollbar(players_frame, orient=tk.VERTICAL, command=self.players_tree.yview)
        self.players_tree.configure(yscrollcommand=scrollbar_players.set)
        
        self.players_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar_players.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –î—è—Å–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
        stats_frame = ttk.LabelFrame(right_frame, text="üìä Team Statistics", padding=10)
        stats_frame.pack(fill=tk.X, pady=5)
        
        self.team_stats_text = scrolledtext.ScrolledText(stats_frame, height=12, width=50)
        self.team_stats_text.pack(fill=tk.BOTH, expand=True)
        
        # –ü—Ä–µ–ø–æ—Ä—ä–∫–∏
        recommendations_frame = ttk.LabelFrame(right_frame, text="üí° AI Recommendations", padding=10)
        recommendations_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.recommendations_text = scrolledtext.ScrolledText(recommendations_frame, height=15, width=50)
        self.recommendations_text.pack(fill=tk.BOTH, expand=True)
    
    def setup_opponent_analysis_tab(self):
        """–¢–∞–± –∑–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏"""
        opponent_frame = ttk.Frame(self.notebook)
        self.notebook.add(opponent_frame, text="üéØ Opponent Analysis")
        
        # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫
        search_frame = ttk.LabelFrame(opponent_frame, text="üîç Opponent Search", padding=10)
        search_frame.pack(fill=tk.X, pady=5)
        
        search_inner = ttk.Frame(search_frame)
        search_inner.pack(fill=tk.X)
        
        ttk.Label(search_inner, text="Opponent Name:", font=('Segoe UI', 10)).pack(side=tk.LEFT, padx=5)
        self.opponent_entry = ttk.Entry(search_inner, width=25)
        self.opponent_entry.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(search_inner, text="üîç Analyze", 
                  command=self.analyze_specific_opponent).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(search_inner, text="üìã All League Opponents", 
                  command=self.analyze_all_league_opponents).pack(side=tk.LEFT, padx=5)
        
        # –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞
        results_frame = ttk.LabelFrame(opponent_frame, text="üìä Analysis Results", padding=10)
        results_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –°–ø–∏—Å—ä–∫ —Å –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏
        opponents_list_frame = ttk.Frame(results_frame)
        opponents_list_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        
        ttk.Label(opponents_list_frame, text="Analyzed Opponents:", font=('Segoe UI', 10, 'bold')).pack(anchor=tk.W)
        
        self.opponents_listbox = tk.Listbox(opponents_list_frame, width=25, height=20)
        self.opponents_listbox.pack(fill=tk.Y, expand=True)
        self.opponents_listbox.bind('<<ListboxSelect>>', self.on_opponent_select)
        
        # –î–µ—Ç–∞–π–ª–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫
        details_frame = ttk.Frame(results_frame)
        details_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        self.opponent_details_text = scrolledtext.ScrolledText(details_frame, height=25, width=70)
        self.opponent_details_text.pack(fill=tk.BOTH, expand=True)
    
    def setup_tactics_tab(self):
        """–¢–∞–± –∑–∞ —Ç–∞–∫—Ç–∏–∫–∏"""
        tactics_frame = ttk.Frame(self.notebook)
        self.notebook.add(tactics_frame, text="‚ö° Tactics & Strategy")
        
        # –°–µ–∫—Ü–∏—è –∑–∞ —Ñ–æ—Ä–º–∞—Ü–∏–∏
        formation_frame = ttk.LabelFrame(tactics_frame, text="üèí Formation Setup", padding=10)
        formation_frame.pack(fill=tk.X, pady=5)
        
        formation_controls = ttk.Frame(formation_frame)
        formation_controls.pack(fill=tk.X)
        
        ttk.Label(formation_controls, text="Formation:", font=('Segoe UI', 10)).pack(side=tk.LEFT, padx=5)
        self.formation_var = tk.StringVar(value="1-3-2")
        formation_combo = ttk.Combobox(formation_controls, textvariable=self.formation_var,
                                     values=["1-4-1", "1-3-2", "1-2-3"], width=10)
        formation_combo.pack(side=tk.LEFT, padx=5)
        
        ttk.Label(formation_controls, text="Specialization:", font=('Segoe UI', 10)).pack(side=tk.LEFT, padx=(20,5))
        self.specialization_var = tk.StringVar(value="hura_system")
        spec_combo = ttk.Combobox(formation_controls, textvariable=self.specialization_var,
                                values=list(TACTICAL_SPECIALIZATIONS.keys()), width=15)
        spec_combo.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(formation_controls, text="üéØ Optimize", 
                  command=self.optimize_tactics).pack(side=tk.LEFT, padx=20)
        
        # –°–µ–∫—Ü–∏—è –∑–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
        tactics_rec_frame = ttk.LabelFrame(tactics_frame, text="üß† AI Tactical Recommendations", padding=10)
        tactics_rec_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.tactics_text = scrolledtext.ScrolledText(tactics_rec_frame, height=25, width=80)
        self.tactics_text.pack(fill=tk.BOTH, expand=True)
    
    def setup_match_preparation_tab(self):
        """–¢–∞–± –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞ –º–∞—á"""
        match_frame = ttk.Frame(self.notebook)
        self.notebook.add(match_frame, text="ü•Ö Match Preparation")
        
        # –ò–∑–±–æ—Ä –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∑–∞ –º–∞—á
        opponent_select_frame = ttk.LabelFrame(match_frame, text="üéØ Select Opponent", padding=10)
        opponent_select_frame.pack(fill=tk.X, pady=5)
        
        select_controls = ttk.Frame(opponent_select_frame)
        select_controls.pack(fill=tk.X)
        
        ttk.Label(select_controls, text="Next Match Opponent:", font=('Segoe UI', 10)).pack(side=tk.LEFT, padx=5)
        self.match_opponent_var = tk.StringVar()
        self.match_opponent_combo = ttk.Combobox(select_controls, textvariable=self.match_opponent_var, width=25)
        self.match_opponent_combo.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(select_controls, text="üìã Prepare Match Plan", 
                  command=self.prepare_match_plan).pack(side=tk.LEFT, padx=20)
        
        # –ü–ª–∞–Ω –∑–∞ –º–∞—á–∞
        match_plan_frame = ttk.LabelFrame(match_frame, text="üìù Complete Match Plan", padding=10)
        match_plan_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.match_plan_text = scrolledtext.ScrolledText(match_plan_frame, height=25, width=80)
        self.match_plan_text.pack(fill=tk.BOTH, expand=True)
        
        # –ï–∫—Å–ø–æ—Ä—Ç –±—É—Ç–æ–Ω–∏
        export_frame = ttk.Frame(match_frame)
        export_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(export_frame, text="üíæ Save Match Plan", 
                  command=self.save_match_plan).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(export_frame, text="üìß Email Plan", 
                  command=self.email_match_plan).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(export_frame, text="üì± Mobile Export", 
                  command=self.mobile_export).pack(side=tk.LEFT, padx=5)
    
    def setup_guide_tab(self):
        """–¢–∞–± –∑–∞ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ"""
        guide_frame = ttk.Frame(self.notebook)
        self.notebook.add(guide_frame, text="üìö Official Guide")
        
        # –°—Ç–∞—Ç—É—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ—Ç–æ
        status_frame = ttk.LabelFrame(guide_frame, text="üìä Guide Analysis Status", padding=10)
        status_frame.pack(fill=tk.X, pady=5)
        
        self.guide_status_label = ttk.Label(status_frame, text="–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ...")
        self.guide_status_label.pack(anchor=tk.W)
        
        # –°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ—Ç–æ
        content_frame = ttk.LabelFrame(guide_frame, text="üìñ Guide Content & Insights", padding=10)
        content_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.guide_content_text = scrolledtext.ScrolledText(content_frame, height=25, width=80)
        self.guide_content_text.pack(fill=tk.BOTH, expand=True)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª–∏
        controls_frame = ttk.Frame(guide_frame)
        controls_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(controls_frame, text="üîÑ Refresh Guide Analysis", 
                  command=self.analyze_official_guide).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(controls_frame, text="üåê Open Official Guide", 
                  command=lambda: webbrowser.open("https://www.ha-navod.eu")).pack(side=tk.LEFT, padx=5)
    
    def setup_logs_tab(self):
        """–¢–∞–± –∑–∞ –ª–æ–≥–æ–≤–µ –∏ debug"""
        logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(logs_frame, text="üìã Logs & Debug")
        
        # –ö–æ–Ω—Ç—Ä–æ–ª–∏ –∑–∞ –ª–æ–≥–æ–≤–µ
        controls_frame = ttk.Frame(logs_frame)
        controls_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(controls_frame, text="üîÑ Refresh", 
                  command=self.refresh_logs).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(controls_frame, text="üíæ Save Logs", 
                  command=self.save_logs).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(controls_frame, text="üóëÔ∏è Clear", 
                  command=self.clear_logs).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(controls_frame, text="üêõ Debug Mode", 
                  command=self.toggle_debug_mode).pack(side=tk.LEFT, padx=5)
        
        # Log viewer
        self.logs_text = scrolledtext.ScrolledText(logs_frame, height=30, width=100)
        self.logs_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ª–æ–≥–æ–≤–µ—Ç–µ
        self.refresh_logs()
    
    def setup_settings_tab(self):
        """–¢–∞–± –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(settings_frame, text="‚öôÔ∏è Settings")
        
        # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        behavior_frame = ttk.LabelFrame(settings_frame, text="ü§ñ AI Behavior Settings", padding=10)
        behavior_frame.pack(fill=tk.X, pady=5)
        
        self.human_behavior_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(behavior_frame, text="Human-like behavior simulation", 
                       variable=self.human_behavior_var).pack(anchor=tk.W)
        
        self.auto_opponent_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(behavior_frame, text="Auto-analyze opponents", 
                       variable=self.auto_opponent_var).pack(anchor=tk.W)
        
        self.deep_tactics_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(behavior_frame, text="Deep tactical analysis", 
                       variable=self.deep_tactics_var).pack(anchor=tk.W)
        
        # Timing –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        timing_frame = ttk.LabelFrame(settings_frame, text="‚è±Ô∏è Timing Settings", padding=10)
        timing_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(timing_frame, text="Minimum delay between requests (seconds):").pack(anchor=tk.W)
        self.min_delay_var = tk.DoubleVar(value=2.0)
        delay_scale = ttk.Scale(timing_frame, from_=0.5, to=10.0, variable=self.min_delay_var,
                               orient=tk.HORIZONTAL, length=300)
        delay_scale.pack(anchor=tk.W, pady=5)
        
        self.delay_value_label = ttk.Label(timing_frame, text="2.0s")
        self.delay_value_label.pack(anchor=tk.W)
        delay_scale.configure(command=self.update_delay_label)
        
        # –§–∞–π–ª–æ–≤–µ –∏ –µ–∫—Å–ø–æ—Ä—Ç
        files_frame = ttk.LabelFrame(settings_frame, text="üìÅ Files & Export", padding=10)
        files_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(files_frame, text="üìÅ Open Work Directory", 
                  command=self.open_work_directory).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(files_frame, text="üóëÔ∏è Clean Old Files", 
                  command=self.clean_old_files).pack(side=tk.LEFT, padx=5)
        
        # –°–ø–µ—Å—Ç—è–≤–∞–Ω–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ttk.Button(settings_frame, text="üíæ Save Settings", 
                  command=self.save_settings).pack(pady=20)
    
    # ==================== EVENT HANDLERS ====================
    
    def analyze_official_guide(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤ –æ—Ç–¥–µ–ª–µ–Ω thread"""
        def analyze():
            try:
                self.guide_status_label.configure(text="üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ...")
                guide_data = self.guide_analyzer.analyze_official_guide()
                
                # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
                content = """
üèí –ê–ù–ê–õ–ò–ó –ù–ê –û–§–ò–¶–ò–ê–õ–ù–û–¢–û –†–™–ö–û–í–û–î–°–¢–í–û
================================================

üìä –û–°–ù–û–í–ù–ò –ê–¢–†–ò–ë–£–¢–ò (–±–∞–∑–∏—Ä–∞–Ω–æ –Ω–∞ ha-navod.eu):
‚Ä¢ Br√°na (GOA) - –ó–∞ –≤—Ä–∞—Ç–∞—Ä–∏, –æ—Å–Ω–æ–≤–µ–Ω –∞—Ç—Ä–∏–±—É—Ç
‚Ä¢ Obrana (DEF) - –ó–∞ –∑–∞—â–∏—Ç–Ω–∏—Ü–∏, –æ—Å–Ω–æ–≤–µ–Ω –∑–∞ –±—Ä–∞–Ω–µ–Ω–µ
‚Ä¢ √ötok (ATT) - –ó–∞ –Ω–∞–ø–∞–¥–∞—Ç–µ–ª–∏, –æ—Å–Ω–æ–≤–µ–Ω –∑–∞ –∞—Ç–∞–∫—É–≤–∞–Ω–µ
‚Ä¢ Streƒæba (SHO) - –ó–∞ –≤—Å–∏—á–∫–∏ –∏–≥—Ä–∞—á–∏ –ø—Ä–∏ —Å—Ç—Ä–µ–ª–±–∏
‚Ä¢ Nahr√°vka/Kontrola puku (PAS) - –í–∞–∂–Ω–æ –∑–∞ —Ü–µ–Ω—Ç—Ä–æ–≤–µ –∏ –≤—Ä–∞—Ç–∞—Ä–∏
‚Ä¢ Sila (STR) - –í–∞–∂–Ω–æ –∑–∞ –≤—Å–∏—á–∫–∏, –æ—Å–æ–±–µ–Ω–æ –ø—Ä–∏ –≤—Ö–≤—ä—Ä–ª—è–Ω–∏—è
‚Ä¢ R√Ωchlos≈• (SPE) - –ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ –æ—Ç –≤—Å–∏—á–∫–∏ –∏–≥—Ä–∞—á–∏
‚Ä¢ Sebaovl√°danie (DIS) - –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ—Å—Ç—Ç–∞ –∏ –≤–∏–ª—É—á–≤–∞–Ω–∏—è—Ç–∞

‚ö° –¢–ê–ö–¢–ò–ß–ï–°–ö–ò –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:
‚Ä¢ Hur√° syst√©m - –ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, —Ö–∞–æ—Ç–∏—á–Ω–æ
‚Ä¢ Proti√∫toky - –ó–∞—â–∏—Ç–∞ + –∫–æ–Ω—Ç—Ä–∞–∞—Ç–∞–∫–∏ (–∏–∑–∏—Å–∫–≤–∞ DEF, SPE, DIS)
‚Ä¢ Nap√°danie - –ê–≥—Ä–µ—Å–∏–≤–Ω–æ –æ—Ç–Ω–µ–º–∞–Ω–µ (–∏–∑–∏—Å–∫–≤–∞ STR, SPE, ATT)
‚Ä¢ Kr√°tke nahr√°vky - –ë—ä—Ä–∑–∏ –ø–æ–¥–∞–≤–∞–Ω–∏—è (–∏–∑–∏—Å–∫–≤–∞ PAS, SPE, ATT)
‚Ä¢ Obrana (checking) - –°–∞–º–æ –∑–∞—â–∏—Ç–∞ (–∏–∑–∏—Å–∫–≤–∞ DEF, STR, DIS)
‚Ä¢ Streƒæba od modrej - –°—Ç—Ä–µ–ª–±–∏ –æ—Ç –∑–∞—â–∏—Ç–Ω–∏—Ü–∏ (–∏–∑–∏—Å–∫–≤–∞ SHO, STR, PAS)
‚Ä¢ Nahr√°vky spoza br√°ny - –ü–æ–¥–∞–≤–∞–Ω–∏—è –æ—Ç –∑–∞–¥ –≤—Ä–∞—Ç–∞—Ç–∞ (–∏–∑–∏—Å–∫–≤–∞ PAS, ATT, SPE)

üèãÔ∏è –¢–†–ï–ù–ò–†–û–í–ö–ò –ò –§–û–†–ú–ê:
‚Ä¢ Energia —Å–µ –≥—É–±–∏ –≤ –º–∞—á–æ–≤–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ Forma —Å–µ –≤–ª–∏—è–µ –æ—Ç –ø–æ—á–∏–≤–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—è–Ω–µ –∏ "—á–µ—Ä–≤–µ–Ω–∞ —Ä—ä–∫–∞"
‚Ä¢ Sk√∫senos≈• —Å–µ –ø–æ–ª—É—á–∞–≤–∞ —Å–∞–º–æ –≤ –º–∞—á–æ–≤–µ
‚Ä¢ –§–æ—Ä–º–∏—Ç–µ —Å–µ –≤–ª–∏—è—è—Ç –æ—Ç –ª–∏–≥–æ–≤–æ –Ω–∏–≤–æ

üí° AI –ü–†–ï–ü–û–†–™–ö–ò –ë–ê–ó–ò–†–ê–ù–ò –ù–ê –†–™–ö–û–í–û–î–°–¢–í–û–¢–û:
‚Ä¢ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Ä–µ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
‚Ä¢ –°–ª–µ–¥–µ—Ç–µ –µ–Ω–µ—Ä–≥–∏—è—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ (<60% = —Ä–∏—Å–∫ –æ—Ç –∫–æ–Ω—Ç—É–∑–∏—è)
‚Ä¢ –¶–µ–Ω—Ç—Ä–æ–≤–µ—Ç–µ —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–º–∞—Ç –≤–∏—Å–æ–∫–∞ Sila –∑–∞ –≤—Ö–≤—ä—Ä–ª—è–Ω–∏—è
‚Ä¢ –í—Ä–∞—Ç–∞—Ä–∏—Ç–µ —Å–µ —É–º–æ—Ä—è–≤–∞—Ç —Å–ø–æ—Ä–µ–¥ –±—Ä–æ—è —Å—Ç—Ä–µ–ª–±–∏
‚Ä¢ –§–æ—Ä–º–∞—Ü–∏—è—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞
‚Ä¢ –ê–≥—Ä–µ—Å–∏–≤–Ω–∞—Ç–∞ –∏–≥—Ä–∞ —É–≤–µ–ª–∏—á–∞–≤–∞ –≤–∏–ª—É—á–µ–Ω–∏—è—Ç–∞ –ø—Ä–∏ –Ω–∏—Å–∫–æ Sebaovl√°danie

üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–û–ù–ù–ò –°–¢–†–ê–¢–ï–ì–ò–ò:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏ –∏–∑–±–µ—Ä–µ—Ç–µ –∫–æ–Ω—Ç—Ä–∞-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
‚Ä¢ –†–æ—Ç–∏—Ä–∞–π—Ç–µ –∏–≥—Ä–∞—á–∏—Ç–µ –∑–∞ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –µ–Ω–µ—Ä–≥–∏—è—Ç–∞
‚Ä¢ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ "—á–µ—Ä–≤–µ–Ω–∞—Ç–∞ —Ä—ä–∫–∞" –∑–∞ –ø–æ–¥–æ–±—Ä—è–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞
‚Ä¢ –§–æ–∫—É—Å–∏—Ä–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏—Ç–µ —Å–ø–æ—Ä–µ–¥ —Ä–æ–ª—è—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∞
‚Ä¢ –°–ª–µ–¥–µ—Ç–µ —Å—ä—á–µ—Ç–∞–Ω–∏–µ—Ç–æ —Ñ–æ—Ä–º–∞—Ü–∏—è + —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è + –∏–≥—Ä–∞—á–∏
"""
                
                self.root.after(0, lambda: self.guide_content_text.delete(1.0, tk.END))
                self.root.after(0, lambda: self.guide_content_text.insert(tk.END, content))
                self.root.after(0, lambda: self.guide_status_label.configure(text="‚úÖ –ê–Ω–∞–ª–∏–∑—ä—Ç –Ω–∞ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ—Ç–æ –µ –∑–∞–≤—ä—Ä—à–µ–Ω"))
                
            except Exception as e:
                error_msg = f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ—Ç–æ: {str(e)}"
                self.root.after(0, lambda: self.guide_status_label.configure(text=error_msg))
                logger.error(f"Guide analysis error: {e}")
        
        thread = threading.Thread(target=analyze, daemon=True)
        thread.start()
    
    def start_comprehensive_analysis(self):
        """–°—Ç–∞—Ä—Ç–∏—Ä–∞ –ø—ä–ª–Ω–∏—è –∞–Ω–∞–ª–∏–∑"""
        if self.running:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ê–Ω–∞–ª–∏–∑—ä—Ç –≤–µ—á–µ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞!")
            return
        
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        
        if not username or not password:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ –∏ –ø–∞—Ä–æ–ª–∞!")
            return
        
        self.running = True
        self.login_button.configure(state='disabled', text="üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ...")
        self.progress.start()
        self.status_indicator.configure(text="üü° Connecting...", style='Warning.TLabel')
        
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –≤ –æ—Ç–¥–µ–ª–µ–Ω thread
        self.analysis_thread = threading.Thread(
            target=self.run_comprehensive_analysis, 
            args=(username, password),
            daemon=True
        )
        self.analysis_thread.start()
    
    def run_comprehensive_analysis(self, username: str, password: str):
        """–ò–∑–ø—ä–ª–Ω—è–≤–∞ –ø—ä–ª–Ω–∏—è –∞–Ω–∞–ª–∏–∑"""
        try:
            self.update_status("üîê –õ–æ–≥–≤–∞–Ω–µ —Å Brave –±—Ä–∞—É–∑—ä—Ä —Å–∏–º—É–ª–∞—Ü–∏—è...")
            
            # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ AI —Å–∏—Å—Ç–µ–º–∞—Ç–∞
            self.analyzer = HockeyArenaMasterAI(username, password)
            
            # –°—Ç—ä–ø–∫–∞ 1: –õ–æ–≥–≤–∞–Ω–µ
            if not self.analyzer.login_with_human_behavior():
                raise Exception("–ù–µ—É—Å–ø–µ—à–Ω–æ –ª–æ–≥–≤–∞–Ω–µ - –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ")
            
            self.update_status("‚úÖ –£—Å–ø–µ—à–Ω–æ –ª–æ–≥–≤–∞–Ω–µ! –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∞...")
            
            # –°—Ç—ä–ø–∫–∞ 2: –ê–Ω–∞–ª–∏–∑ –Ω–∞ –Ω–∞—à–∏—è –æ—Ç–±–æ—Ä
            self.analyzer.analyze_our_team()
            self.our_players = self.analyzer.get_our_players()
            
            self.update_status("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏...")
            
            # –°—Ç—ä–ø–∫–∞ 3: –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏
            if self.deep_analysis_var.get():
                opponents = self.analyzer.discover_and_analyze_opponents()
                self.opponents_data = opponents
            
            self.update_status("‚ö° –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏...")
            
            # –°—Ç—ä–ø–∫–∞ 4: –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–∞–∫—Ç–∏–∫–∏
            if self.auto_tactics_var.get():
                self.analyzer.generate_optimal_tactics()
            
            # –§–∏–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ
            self.root.after(0, self.analysis_completed_successfully)
            
        except Exception as e:
            error_msg = str(e)
            self.root.after(0, lambda: self.analysis_failed(error_msg))
    
    def update_status(self, message: str):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        self.root.after(0, lambda: self.login_status_label.configure(text=message))
        logger.info(message)
    
    def analysis_completed_successfully(self):
        """Callback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ"""
        self.running = False
        self.login_button.configure(state='normal', text="üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ AI –ê–Ω–∞–ª–∏–∑")
        self.progress.stop()
        self.status_indicator.configure(text="üü¢ Online & Ready", style='Success.TLabel')
        
        # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–∞–±–æ–≤–µ —Å –¥–∞–Ω–Ω–∏
        self.update_dashboard()
        self.update_team_analysis()
        self.update_opponents_list()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "üéâ AI –∞–Ω–∞–ª–∏–∑—ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n–ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≤—Å–∏—á–∫–∏ —Ç–∞–±–æ–≤–µ –∑–∞ –¥–µ—Ç–∞–π–ª–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏.")
        
        # –ü—Ä–µ–º–∏–Ω–∞–≤–∞–Ω–µ –∫—ä–º dashboard
        self.notebook.select(0)
    
    def analysis_failed(self, error_msg: str):
        """Callback –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–µ–Ω –∞–Ω–∞–ª–∏–∑"""
        self.running = False
        self.login_button.configure(state='normal', text="üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ AI –ê–Ω–∞–ª–∏–∑")
        self.progress.stop()
        self.status_indicator.configure(text="üî¥ Analysis Failed", style='Error.TLabel')
        
        messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ùå –ê–Ω–∞–ª–∏–∑—ä—Ç —Å–µ –ø—Ä–æ–≤–∞–ª–∏:\n\n{error_msg}")
    
    def update_dashboard(self):
        """–û–±–Ω–æ–≤—è–≤–∞ dashboard-–∞"""
        if not self.analyzer:
            return
        
        try:
            # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –±—ä—Ä–∑–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            team_rating = self.analyzer.get_team_rating()
            self.stats_labels['team_rating'].configure(text=f"Team Rating: {team_rating:.1f}/100")
            
            next_opponent = self.analyzer.get_next_opponent()
            self.stats_labels['next_opponent'].configure(text=f"Next Opponent: {next_opponent}")
            
            if next_opponent and next_opponent in self.opponents_data:
                win_prob = self.opponents_data[next_opponent].get('win_probability', 50)
                self.stats_labels['win_probability'].configure(text=f"Win Probability: {win_prob:.1f}%")
            
            recommended_tactic = self.analyzer.get_recommended_tactic()
            self.stats_labels['recommended_tactic'].configure(text=f"Recommended Tactic: {recommended_tactic}")
            
            # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∏—Ç–µ
            if CHARTS_AVAILABLE:
                self.update_charts()
                
        except Exception as e:
            logger.error(f"Dashboard update error: {e}")
    
    def update_charts(self):
        """–û–±–Ω–æ–≤—è–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∏—Ç–µ"""
        if not CHARTS_AVAILABLE:
            return
        
        try:
            # –ü–æ—á–∏—Å—Ç–≤–∞–º–µ –≥—Ä–∞—Ñ–∏–∫–∏—Ç–µ
            for ax in [self.ax1, self.ax2, self.ax3, self.ax4]:
                ax.clear()
                ax.set_facecolor('#161b22')
            
            if self.analyzer and self.our_players:
                # –ì—Ä–∞—Ñ–∏–∫–∞ 1: –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                positions = {}
                for player in self.our_players:
                    pos = player.get('best_position', 'Unknown')
                    positions[pos] = positions.get(pos, 0) + 1
                
                if positions:
                    self.ax1.pie(positions.values(), labels=positions.keys(), autopct='%1.1f%%',
                               colors=['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4'])
                    self.ax1.set_title('Position Distribution', color='white', fontsize=12)
                
                # –ì—Ä–∞—Ñ–∏–∫–∞ 2: –í—ä–∑—Ä–∞—Å—Ç–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                ages = [p.get('age', 25) for p in self.our_players if p.get('age')]
                if ages:
                    self.ax2.hist(ages, bins=10, color='#7c3aed', alpha=0.7, edgecolor='white')
                    self.ax2.set_title('Age Distribution', color='white', fontsize=12)
                    self.ax2.set_xlabel('Age', color='white')
                    self.ax2.set_ylabel('Count', color='white')
                    self.ax2.tick_params(colors='white')
                
                # –ì—Ä–∞—Ñ–∏–∫–∞ 3: –†–µ–π—Ç–∏–Ω–≥–∏ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ
                ratings = [p.get('ai_rating', 0) for p in self.our_players if p.get('ai_rating')]
                if ratings:
                    self.ax3.boxplot(ratings, patch_artist=True, 
                                   boxprops=dict(facecolor='#45b7d1', alpha=0.7))
                    self.ax3.set_title('Player Ratings Distribution', color='white', fontsize=12)
                    self.ax3.set_ylabel('Rating', color='white')
                    self.ax3.tick_params(colors='white')
                
                # –ì—Ä–∞—Ñ–∏–∫–∞ 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏
                if self.opponents_data:
                    opponent_names = list(self.opponents_data.keys())[:5]
                    win_probs = [self.opponents_data[name].get('win_probability', 50) 
                               for name in opponent_names]
                    
                    bars = self.ax4.bar(range(len(opponent_names)), win_probs, 
                                      color=['#238636' if p > 60 else '#fb8500' if p > 40 else '#da3633' 
                                            for p in win_probs])
                    self.ax4.set_title('Win Probability vs Top Opponents', color='white', fontsize=12)
                    self.ax4.set_ylabel('Win Probability (%)', color='white')
                    self.ax4.set_xticks(range(len(opponent_names)))
                    self.ax4.set_xticklabels([name[:10] for name in opponent_names], 
                                           rotation=45, color='white')
                    self.ax4.tick_params(colors='white')
            else:
                # Placeholder –≥—Ä–∞—Ñ–∏–∫–∏
                for i, ax in enumerate([self.ax1, self.ax2, self.ax3, self.ax4]):
                    ax.text(0.5, 0.5, f'Chart {i+1}\nNo Data Available', 
                           transform=ax.transAxes, ha='center', va='center',
                           color='white', fontsize=12)
                    ax.set_title(f'Chart {i+1}', color='white')
            
            self.fig.tight_layout()
            self.canvas.draw()
            
        except Exception as e:
            logger.error(f"Charts update error: {e}")
    
    def update_team_analysis(self):
        """–û–±–Ω–æ–≤—è–≤–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∞"""
        if not self.analyzer:
            return
        
        try:
            # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –æ—Ç–±–æ—Ä–∞
            team_info = self.analyzer.get_team_info_summary()
            self.team_info_text.delete(1.0, tk.END)
            self.team_info_text.insert(tk.END, team_info)
            
            # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Å–ø–∏—Å—ä–∫–∞ —Å –∏–≥—Ä–∞—á–∏
            for item in self.players_tree.get_children():
                self.players_tree.delete(item)
            
            for player in self.our_players:
                name = player.get('name', 'Unknown')
                position = player.get('best_position', 'Unknown')
                rating = player.get('ai_rating', 0)
                age = player.get('age', 0)
                form = player.get('form', 100)
                
                self.players_tree.insert('', 'end', text=name, 
                                       values=(position, f"{rating:.1f}", age, f"{form}%"))
            
            # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ
            team_stats = self.analyzer.get_detailed_team_stats()
            self.team_stats_text.delete(1.0, tk.END)
            self.team_stats_text.insert(tk.END, team_stats)
            
            # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏—Ç–µ
            recommendations = self.analyzer.get_team_recommendations()
            self.recommendations_text.delete(1.0, tk.END)
            self.recommendations_text.insert(tk.END, recommendations)
            
        except Exception as e:
            logger.error(f"Team analysis update error: {e}")
    
    def update_opponents_list(self):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å–ø–∏—Å—ä–∫–∞ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏"""
        self.opponents_listbox.delete(0, tk.END)
        
        if self.opponents_data:
            # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∫–æ–º–±–æ –±–æ–∫—Å–∞ –∑–∞ –º–∞—á
            opponent_names = list(self.opponents_data.keys())
            self.match_opponent_combo['values'] = opponent_names
            
            # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ª–∏—Å—Ç–±–æ–∫—Å–∞
            for name in opponent_names:
                win_prob = self.opponents_data[name].get('win_probability', 50)
                display_name = f"{name} ({win_prob:.1f}%)"
                self.opponents_listbox.insert(tk.END, display_name)
    
    def on_opponent_select(self, event):
        """Handler –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫"""
        selection = self.opponents_listbox.curselection()
        if selection:
            index = selection[0]
            opponent_names = list(self.opponents_data.keys())
            
            if index < len(opponent_names):
                opponent_name = opponent_names[index]
                self.display_opponent_details(opponent_name)
    
    def display_opponent_details(self, opponent_name: str):
        """–ü–æ–∫–∞–∑–≤–∞ –¥–µ—Ç–∞–π–ª–∏ –∑–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"""
        if opponent_name not in self.opponents_data:
            return
        
        opponent = self.opponents_data[opponent_name]
        
        details = f"""
üéØ –î–ï–¢–ê–ô–õ–ï–ù –ê–ù–ê–õ–ò–ó: {opponent_name}
{'='*60}

üìä –û–ë–©–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò:
‚Ä¢ –°–∏–ª–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∞: {opponent.get('strength_rating', 0):.1f}/100
‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ –ø–æ–±–µ–¥–∞: {opponent.get('win_probability', 50):.1f}%
‚Ä¢ –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è: {opponent.get('tactical_tendency', 'Unknown')}

üí™ –°–ò–õ–ù–ò –°–¢–†–ê–ù–ò:
{chr(10).join('‚Ä¢ ' + s for s in opponent.get('strengths', ['–ù—è–º–∞ –¥–∞–Ω–Ω–∏']))}

‚ö†Ô∏è –°–õ–ê–ë–û–°–¢–ò:
{chr(10).join('‚Ä¢ ' + w for w in opponent.get('weaknesses', ['–ù—è–º–∞ –¥–∞–Ω–Ω–∏']))}

üéØ –ü–†–ï–ü–û–†–™–ß–ò–¢–ï–õ–ù–ò –¢–ê–ö–¢–ò–ö–ò:
‚Ä¢ –§–æ—Ä–º–∞—Ü–∏—è: {opponent.get('recommended_tactics', {}).get('recommended_formation', 'Unknown')}
‚Ä¢ –§–æ–∫—É—Å: {opponent.get('recommended_tactics', {}).get('focus', 'Unknown')}
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {opponent.get('recommended_tactics', {}).get('specialization', 'Unknown')}

üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ó–ê –ú–ê–ß–ê:
{chr(10).join('‚Ä¢ ' + i for i in opponent.get('match_instructions', ['–ù—è–º–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏']))}

üí° AI –ü–†–ï–ü–û–†–™–ö–ò:
‚Ä¢ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —Ç—è—Ö–Ω–∏—Ç–µ —Å–ª–∞–±–æ—Å—Ç–∏ –≤ –≤–∞—à–∞ –ø–æ–ª–∑–∞
‚Ä¢ –í–Ω–∏–º–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ö–Ω–∏—Ç–µ —Å–∏–ª–Ω–∏ —Å—Ç—Ä–∞–Ω–∏
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–∞–π—Ç–µ —Ç–∞–∫—Ç–∏–∫–∞—Ç–∞ —Å–ø–æ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –°–ª–µ–¥–µ—Ç–µ –µ–Ω–µ—Ä–≥–∏—è—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ
"""
        
        self.opponent_details_text.delete(1.0, tk.END)
        self.opponent_details_text.insert(tk.END, details)
    
    def analyze_specific_opponent(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫"""
        opponent_name = self.opponent_entry.get().strip()
        
        if not opponent_name:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –∏–º–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫!")
            return
        
        if not self.analyzer:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ü—ä—Ä–≤–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–∏—è –∞–Ω–∞–ª–∏–∑!")
            return
        
        def analyze():
            try:
                self.update_status(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ {opponent_name}...")
                analysis = self.analyzer.analyze_specific_opponent(opponent_name)
                
                if analysis:
                    self.opponents_data[opponent_name] = analysis
                    self.root.after(0, self.update_opponents_list)
                    self.root.after(0, lambda: self.display_opponent_details(opponent_name))
                    self.root.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ {opponent_name} –µ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"))
                else:
                    self.root.after(0, lambda: messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ùå –ù–µ—É—Å–ø–µ—à–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ {opponent_name}"))
                    
            except Exception as e:
                error_msg = str(e)
                self.root.after(0, lambda: messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ùå –ì—Ä–µ—à–∫–∞: {error_msg}"))
        
        thread = threading.Thread(target=analyze, daemon=True)
        thread.start()
    
    def analyze_all_league_opponents(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏ –æ—Ç –ª–∏–≥–∞—Ç–∞"""
        if not self.analyzer:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ü—ä—Ä–≤–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–∏—è –∞–Ω–∞–ª–∏–∑!")
            return
        
        def analyze_all():
            try:
                self.update_status("üîç –û—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏ –≤ –ª–∏–≥–∞—Ç–∞...")
                all_opponents = self.analyzer.discover_all_league_opponents()
                
                total = len(all_opponents)
                for i, opponent in enumerate(all_opponents, 1):
                    self.update_status(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ {i}/{total}: {opponent}")
                    
                    analysis = self.analyzer.analyze_specific_opponent(opponent)
                    if analysis:
                        self.opponents_data[opponent] = analysis
                    
                    # –û–±–Ω–æ–≤—è–≤–∞–º–µ GUI –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ
                    if i % 3 == 0:
                        self.root.after(0, self.update_opponents_list)
                
                self.root.after(0, self.update_opponents_list)
                self.root.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ {len(self.opponents_data)} –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!"))
                
            except Exception as e:
                error_msg = str(e)
                self.root.after(0, lambda: messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ùå –ì—Ä–µ—à–∫–∞: {error_msg}"))
        
        thread = threading.Thread(target=analyze_all, daemon=True)
        thread.start()
    
    def optimize_tactics(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞ —Ç–∞–∫—Ç–∏–∫–∏—Ç–µ"""
        if not self.analyzer or not self.our_players:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ü—ä—Ä–≤–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∞!")
            return
        
        try:
            formation = self.formation_var.get()
            specialization = self.specialization_var.get()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∏ —Ç–∞–∫—Ç–∏–∫–∏
            optimized = self.analyzer.optimize_tactics_for_formation(formation, specialization)
            
            tactics_content = f"""
‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–ê–ù–ò –¢–ê–ö–¢–ò–ö–ò
========================

üèí –ò–ó–ë–†–ê–ù–ê –ù–ê–°–¢–†–û–ô–ö–ê:
‚Ä¢ –§–æ—Ä–º–∞—Ü–∏—è: {formation}
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {TACTICAL_SPECIALIZATIONS.get(specialization, {}).get('name', specialization)}

üìã –û–ü–ò–°–ê–ù–ò–ï –ù–ê –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø–¢–ê:
{TACTICAL_SPECIALIZATIONS.get(specialization, {}).get('description', '–ù—è–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ')}

üë• –û–ü–¢–ò–ú–ê–õ–ï–ù –°–™–°–¢–ê–í:
{optimized.get('lineup_details', '–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ...')}

üí° –¢–ê–ö–¢–ò–ß–ï–°–ö–ò –°–™–í–ï–¢–ò:
{chr(10).join('‚Ä¢ ' + tip for tip in optimized.get('tactical_tips', ['–ù—è–º–∞ —Å—ä–≤–µ—Ç–∏']))}

‚ö†Ô∏è –í–ê–ñ–ù–ò –ë–ï–õ–ï–ñ–ö–ò:
‚Ä¢ –°–ª–µ–¥–µ—Ç–µ –µ–Ω–µ—Ä–≥–∏—è—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–∞–π—Ç–µ —Å–ø–æ—Ä–µ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
‚Ä¢ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –∑–∞–º–µ—Å—Ç–≤–∞–Ω–∏—è—Ç–∞ –º—ä–¥—Ä–æ
‚Ä¢ –ù–∞–±–ª—é–¥–∞–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ

üîÑ –†–û–¢–ê–¶–ò–û–ù–ï–ù –ü–õ–ê–ù:
{optimized.get('rotation_plan', '–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –ø–ª–∞–Ω...')}
"""
            
            self.tactics_text.delete(1.0, tk.END)
            self.tactics_text.insert(tk.END, tactics_content)
            
        except Exception as e:
            logger.error(f"Tactics optimization error: {e}")
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {str(e)}")
    
    def prepare_match_plan(self):
        """–ü–æ–¥–≥–æ—Ç–≤—è –ø–ª–∞–Ω –∑–∞ –º–∞—á"""
        opponent_name = self.match_opponent_var.get()
        
        if not opponent_name:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫!")
            return
        
        if opponent_name not in self.opponents_data:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ü—ä—Ä–≤–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–π—Ç–µ {opponent_name}!")
            return
        
        try:
            opponent = self.opponents_data[opponent_name]
            
            match_plan = f"""
ü•Ö –ü–™–õ–ï–ù –ü–õ–ê–ù –ó–ê –ú–ê–ß
==================
üéØ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_name}
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}

üìä –ê–ù–ê–õ–ò–ó –ù–ê –ü–†–û–¢–ò–í–ù–ò–ö–ê:
‚Ä¢ –°–∏–ª–∞: {opponent.get('strength_rating', 0):.1f}/100
‚Ä¢ –°—Ç–∏–ª: {opponent.get('tactical_tendency', 'Unknown')}
‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ –ø–æ–±–µ–¥–∞: {opponent.get('win_probability', 50):.1f}%

üí™ –¢–ï–•–ù–ò –°–ò–õ–ù–ò –°–¢–†–ê–ù–ò:
{chr(10).join('‚Ä¢ ' + s for s in opponent.get('strengths', []))}

‚ö†Ô∏è –¢–ï–•–ù–ò –°–õ–ê–ë–û–°–¢–ò:
{chr(10).join('‚Ä¢ ' + w for w in opponent.get('weaknesses', []))}

‚ö° –ù–ê–®–ê –¢–ê–ö–¢–ò–ö–ê:
‚Ä¢ –§–æ—Ä–º–∞—Ü–∏—è: {opponent.get('recommended_tactics', {}).get('recommended_formation', 'Unknown')}
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {opponent.get('recommended_tactics', {}).get('specialization', 'Unknown')}
‚Ä¢ –§–æ–∫—É—Å: {opponent.get('recommended_tactics', {}).get('focus', 'Unknown')}

üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ó–ê –ú–ê–ß–ê:
{chr(10).join('‚Ä¢ ' + i for i in opponent.get('match_instructions', []))}

üë• –°–™–°–¢–ê–í –ò –†–û–¢–ê–¶–ò–Ø:
‚Ä¢ –û—Å–Ω–æ–≤–µ–Ω —Å—ä—Å—Ç–∞–≤: –ù–∞–π-–¥–æ–±—Ä–∏—Ç–µ –∏–≥—Ä–∞—á–∏ —Å–ø–æ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ü–ª–∞–Ω –∑–∞ –∑–∞–º–µ—Å—Ç–≤–∞–Ω–∏—è: 40-—Ç–∞, 60-—Ç–∞ –º–∏–Ω—É—Ç–∞
‚Ä¢ –í–Ω–∏–º–∞–Ω–∏–µ: –°–ª–µ–¥–µ—Ç–µ –µ–Ω–µ—Ä–≥–∏—è—Ç–∞ –Ω–∞ –∫–ª—é—á–æ–≤–∏—Ç–µ –∏–≥—Ä–∞—á–∏

üïê –ü–õ–ê–ù –ü–û –í–†–ï–ú–ï–ù–ê:

–ü–†–ï–î–ò –ú–ê–ß–ê (60 –º–∏–Ω):
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ –≤—Å–∏—á–∫–∏ –∏–≥—Ä–∞—á–∏
‚Ä¢ –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –µ–Ω–µ—Ä–≥–∏—è—Ç–∞ –µ –Ω–∞–¥ 80%
‚Ä¢ –ü—Ä–µ–≥–ª–µ–¥–∞–π—Ç–µ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∞—Ç–∞ —Å—Ö–µ–º–∞
‚Ä¢ –ù–∞–ø—Ä–∞–≤–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

–ü–™–†–í–û –ü–û–õ–£–í–†–ï–ú–ï (0-30 –º–∏–Ω):
‚Ä¢ –ó–∞–ø–æ—á–Ω–µ—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª–Ω–æ, —Ç–µ—Å—Ç–≤–∞–π—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
‚Ä¢ –§–æ–∫—É—Å–∏—Ä–∞–π—Ç–µ —Å–µ –≤—ä—Ä—Ö—É —Ç–µ—Ö–Ω–∏—Ç–µ —Å–ª–∞–±–æ—Å—Ç–∏
‚Ä¢ –ò–∑–±—è–≥–≤–∞–π—Ç–µ —Ä–∞–Ω–Ω–∏ –≥—Ä–µ—à–∫–∏
‚Ä¢ –¢—ä—Ä—Å–µ—Ç–µ —Ä–∞–Ω–µ–Ω –≥–æ–ª –∑–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–æ

–í–¢–û–†–û –ü–û–õ–£–í–†–ï–ú–ï (30-60 –º–∏–Ω):
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–∞–π—Ç–µ —Ç–∞–∫—Ç–∏–∫–∞—Ç–∞ —Å–ø–æ—Ä–µ–¥ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
‚Ä¢ –ü—Ä–∏ –≤–æ–¥–µ–Ω–µ: –ò–≥—Ä–∞–π—Ç–µ –ø–æ-–ø—Ä–µ–¥–ø–∞–∑–ª–∏–≤–æ
‚Ä¢ –ü—Ä–∏ –∏–∑–æ—Å—Ç–∞–≤–∞–Ω–µ: –£–≤–µ–ª–∏—á–µ—Ç–µ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ—Å—Ç—Ç–∞
‚Ä¢ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –∑–∞–º–µ—Å—Ç–≤–∞–Ω–∏—è—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏

–ò–ó–í–™–ù–†–ï–î–ù–ò –°–ò–¢–£–ê–¶–ò–ò:
‚Ä¢ –ü—Ä–∏ —á–µ—Ä–≤–µ–Ω –∫–∞—Ä—Ç–æ–Ω: –ü—Ä–µ–º–∏–Ω–µ—Ç–µ –≤ –∑–∞—â–∏—Ç–Ω–∞ —Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ –ü—Ä–∏ –∫–æ–Ω—Ç—É–∑–∏—è –Ω–∞ –∫–ª—é—á–æ–≤ –∏–≥—Ä–∞—á: –ë—ä—Ä–∑–∞ –∑–∞–º—è–Ω–∞
‚Ä¢ –ü—Ä–∏ –ª–æ—à —Å—Ç–∞—Ä—Ç: –¢–∞–π–º-–∞—É—Ç –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

üí° –ö–õ–Æ–ß–û–í–ò –¢–û–ß–ö–ò:
‚Ä¢ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ {', '.join(opponent.get('weaknesses', [])[:2])}
‚Ä¢ –í–Ω–∏–º–∞–≤–∞–π—Ç–µ —Å {', '.join(opponent.get('strengths', [])[:2])}
‚Ä¢ –ü–æ–¥–¥—ä—Ä–∂–∞–π—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
‚Ä¢ –ë—ä–¥–µ—Ç–µ –≥—ä–≤–∫–∞–≤–∏ –≤ —Ç–∞–∫—Ç–∏–∫–∞—Ç–∞

üéØ –¶–ï–õ–ò –ó–ê –ú–ê–ß–ê:
‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞ —Ü–µ–ª: –ü–æ–±–µ–¥–∞ —Å –¥–æ–±—Ä–∞ –∏–≥—Ä–∞
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª–Ω–∞ —Ü–µ–ª: –¢–æ—á–∫–∞ –ø—Ä–∏ –¥–æ–±—Ä–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—è–Ω–µ
‚Ä¢ –î—ä–ª–≥–æ—Ç—Ä–∞–π–Ω–∞ —Ü–µ–ª: –†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞ –º–ª–∞–¥–∏—Ç–µ –∏–≥—Ä–∞—á–∏

üìù –ë–ï–õ–ï–ñ–ö–ò:
‚Ä¢ –ó–∞–ø–∏—à–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–º–µ–Ω–∏ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –º–∞—á–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤—è–Ω–µ—Ç–æ —Å–ª–µ–¥ –º–∞—á–∞
‚Ä¢ –ü–æ–¥–≥–æ—Ç–≤–µ—Ç–µ —Å–µ –∑–∞ —Å–ª–µ–¥–≤–∞—â–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫
"""
            
            self.match_plan_text.delete(1.0, tk.END)
            self.match_plan_text.insert(tk.END, match_plan)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –ü–ª–∞–Ω—ä—Ç –∑–∞ –º–∞—á —Å—Ä–µ—â—É {opponent_name} –µ –≥–æ—Ç–æ–≤!")
            
        except Exception as e:
            logger.error(f"Match plan error: {e}")
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–ª–∞–Ω: {str(e)}")
    
    def save_match_plan(self):
        """–ó–∞–ø–∞–∑–≤–∞ –ø–ª–∞–Ω–∞ –∑–∞ –º–∞—á"""
        content = self.match_plan_text.get(1.0, tk.END)
        
        if not content.strip():
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù—è–º–∞ –ø–ª–∞–Ω –∑–∞ –∑–∞–ø–∞–∑–≤–∞–Ω–µ!")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            title="–ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø–ª–∞–Ω –∑–∞ –º–∞—á"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –ü–ª–∞–Ω—ä—Ç –µ –∑–∞–ø–∞–∑–µ–Ω –≤ {filename}")
            except Exception as e:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ: {str(e)}")
    
    def email_match_plan(self):
        """–ò–∑–ø—Ä–∞—â–∞ –ø–ª–∞–Ω–∞ –ø–æ –∏–º–µ–π–ª (placeholder)"""
        messagebox.showinfo("–§—É–Ω–∫—Ü–∏—è", "üìß Email —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ —â–µ –±—ä–¥–µ –¥–æ–±–∞–≤–µ–Ω–∞ –≤ —Å–ª–µ–¥–≤–∞—â–∞ –≤–µ—Ä—Å–∏—è")
    
    def mobile_export(self):
        """–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞ –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (placeholder)"""
        messagebox.showinfo("–§—É–Ω–∫—Ü–∏—è", "üì± Mobile export —â–µ –±—ä–¥–µ –¥–æ–±–∞–≤–µ–Ω –≤ —Å–ª–µ–¥–≤–∞—â–∞ –≤–µ—Ä—Å–∏—è")
    
    def refresh_analysis(self):
        """–û–±–Ω–æ–≤—è–≤–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.analyzer:
            self.update_dashboard()
            self.update_team_analysis()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ê–Ω–∞–ª–∏–∑—ä—Ç –µ –æ–±–Ω–æ–≤–µ–Ω!")
        else:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ü—ä—Ä–≤–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑–∞!")
    
    def analyze_next_opponent(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ —Å–ª–µ–¥–≤–∞—â–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫"""
        if not self.analyzer:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ü—ä—Ä–≤–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑–∞!")
            return
        
        next_opponent = self.analyzer.get_next_opponent()
        if next_opponent:
            self.opponent_entry.delete(0, tk.END)
            self.opponent_entry.insert(0, next_opponent)
            self.analyze_specific_opponent()
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù—è–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Å–ª–µ–¥–≤–∞—â –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫")
    
    def export_comprehensive_report(self):
        """–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞ –ø—ä–ª–µ–Ω –æ—Ç—á–µ—Ç"""
        if not self.analyzer:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ü—ä—Ä–≤–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑–∞!")
            return
        
        try:
            filename = self.analyzer.generate_comprehensive_report()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –ü—ä–ª–Ω–∏—è—Ç –æ—Ç—á–µ—Ç –µ –µ–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω –≤ {filename}")
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç: {str(e)}")
    
    def refresh_logs(self):
        """–û–±–Ω–æ–≤—è–≤–∞ –ª–æ–≥–æ–≤–µ—Ç–µ"""
        try:
            self.logs_text.delete(1.0, tk.END)
            
            # –ó–∞—Ä–µ–∂–¥–∞–º–µ debug –ª–æ–≥–æ–≤–µ—Ç–µ
            try:
                with open('hockey_arena_debug.log', 'r', encoding='utf-8') as f:
                    debug_logs = f.read()
                self.logs_text.insert(tk.END, "=== DEBUG LOGS ===\n")
                self.logs_text.insert(tk.END, debug_logs[-5000:])  # –ü–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 5000 —Å–∏–º–≤–æ–ª–∞
            except FileNotFoundError:
                self.logs_text.insert(tk.END, "Debug log file not found.\n")
            
            # –ó–∞—Ä–µ–∂–¥–∞–º–µ error –ª–æ–≥–æ–≤–µ—Ç–µ
            try:
                with open('hockey_arena_errors.log', 'r', encoding='utf-8') as f:
                    error_logs = f.read()
                if error_logs.strip():
                    self.logs_text.insert(tk.END, "\n\n=== ERROR LOGS ===\n")
                    self.logs_text.insert(tk.END, error_logs[-3000:])  # –ü–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3000 —Å–∏–º–≤–æ–ª–∞
            except FileNotFoundError:
                pass
            
            # –°–∫—Ä–æ–ª–∏—Ä–∞–Ω–µ –¥–æ –∫—Ä–∞—è
            self.logs_text.see(tk.END)
            
        except Exception as e:
            self.logs_text.delete(1.0, tk.END)
            self.logs_text.insert(tk.END, f"Error loading logs: {str(e)}")
    
    def save_logs(self):
        """–ó–∞–ø–∞–∑–≤–∞ –ª–æ–≥–æ–≤–µ—Ç–µ"""
        content = self.logs_text.get(1.0, tk.END)
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".log",
            filetypes=[("Log files", "*.log"), ("Text files", "*.txt"), ("All files", "*.*")],
            title="–ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –ª–æ–≥–æ–≤–µ"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –õ–æ–≥–æ–≤–µ—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ –≤ {filename}")
            except Exception as e:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ: {str(e)}")
    
    def clear_logs(self):
        """–ò–∑—á–∏—Å—Ç–≤–∞ –ª–æ–≥–æ–≤–µ—Ç–µ"""
        if messagebox.askyesno("–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ", "–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—á–∏—Å—Ç–∏—Ç–µ –ª–æ–≥–æ–≤–µ—Ç–µ?"):
            self.logs_text.delete(1.0, tk.END)
    
    def toggle_debug_mode(self):
        """–ü—Ä–µ–≤–∫–ª—é—á–≤–∞ debug —Ä–µ–∂–∏–º–∞"""
        current_level = logging.getLogger().level
        
        if current_level == logging.DEBUG:
            logging.getLogger().setLevel(logging.INFO)
            messagebox.showinfo("Debug Mode", "üîß Debug —Ä–µ–∂–∏–º—ä—Ç –µ –∏–∑–∫–ª—é—á–µ–Ω")
        else:
            logging.getLogger().setLevel(logging.DEBUG)
            messagebox.showinfo("Debug Mode", "üêõ Debug —Ä–µ–∂–∏–º—ä—Ç –µ –≤–∫–ª—é—á–µ–Ω")
    
    def update_delay_label(self, value):
        """–û–±–Ω–æ–≤—è–≤–∞ –µ—Ç–∏–∫–µ—Ç–∞ –∑–∞ delay"""
        self.delay_value_label.configure(text=f"{float(value):.1f}s")
    
    def open_work_directory(self):
        """–û—Ç–≤–∞—Ä—è —Ä–∞–±–æ—Ç–Ω–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"""
        try:
            if sys.platform == "win32":
                os.startfile(os.getcwd())
            elif sys.platform == "darwin":
                os.system(f"open {os.getcwd()}")
            else:
                os.system(f"xdg-open {os.getcwd()}")
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç–≤–∞—Ä—è–Ω–µ: {str(e)}")
    
    def clean_old_files(self):
        """–ò–∑—á–∏—Å—Ç–≤–∞ —Å—Ç–∞—Ä–∏ —Ñ–∞–π–ª–æ–≤–µ"""
        try:
            import glob
            
            patterns = ['hockey_arena_*.json', 'hockey_arena_*.txt', '*.html', '*.csv']
            deleted_count = 0
            
            for pattern in patterns:
                files = glob.glob(pattern)
                
                # –ò–∑—Ç—Ä–∏–≤–∞–º–µ —Ñ–∞–π–ª–æ–≤–µ –ø–æ-—Å—Ç–∞—Ä–∏ –æ—Ç 7 –¥–Ω–∏
                for file in files:
                    try:
                        file_time = os.path.getmtime(file)
                        if time.time() - file_time > 7 * 24 * 3600:  # 7 –¥–Ω–∏
                            os.remove(file)
                            deleted_count += 1
                    except:
                        continue
            
            messagebox.showinfo("–ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ", f"‚úÖ –ò–∑—Ç—Ä–∏—Ç–∏ {deleted_count} —Å—Ç–∞—Ä–∏ —Ñ–∞–π–ª–∞")
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ: {str(e)}")
    
    def save_settings(self):
        """–ó–∞–ø–∞–∑–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ"""
        settings = {
            'human_behavior': self.human_behavior_var.get(),
            'auto_opponent': self.auto_opponent_var.get(),
            'deep_tactics': self.deep_tactics_var.get(),
            'min_delay': self.min_delay_var.get(),
            'deep_analysis': self.deep_analysis_var.get(),
            'auto_tactics': self.auto_tactics_var.get()
        }
        
        try:
            with open('ha_master_settings.json', 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏!")
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ: {str(e)}")
    
    def load_settings(self):
        """–ó–∞—Ä–µ–∂–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ"""
        try:
            with open('ha_master_settings.json', 'r', encoding='utf-8') as f:
                settings = json.load(f)
            
            self.human_behavior_var.set(settings.get('human_behavior', True))
            self.auto_opponent_var.set(settings.get('auto_opponent', True))
            self.deep_tactics_var.set(settings.get('deep_tactics', True))
            self.min_delay_var.set(settings.get('min_delay', 2.0))
            self.deep_analysis_var.set(settings.get('deep_analysis', True))
            self.auto_tactics_var.set(settings.get('auto_tactics', True))
            
        except FileNotFoundError:
            pass  # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ defaults
        except Exception as e:
            logger.error(f"Settings loading error: {e}")
    
    def run(self):
        """–°—Ç–∞—Ä—Ç–∏—Ä–∞ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ"""
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ
        self.load_settings()
        
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –≥–ª–∞–≤–Ω–∏—è loop
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            logger.info("Application interrupted by user")
        except Exception as e:
            logger.error(f"GUI error: {e}")
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞", f"‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {str(e)}")

# ==================== MAIN AI SYSTEM CLASS ====================

class HockeyArenaMasterAI:
    """–ì–ª–∞–≤–Ω–∞ AI —Å–∏—Å—Ç–µ–º–∞ —Å –≤—Å–∏—á–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, username: str, password: str):
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.base_url = "https://www.hockeyarena.net"
        
        # –°–∏—Å—Ç–µ–º–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        self.browser_sim = BraveBrowserSimulator()
        self.human_behavior = HumanBehaviorEngine()
        self.opponent_intelligence = OpponentIntelligence(self.session, self.base_url)
        self.tactical_optimizer = TacticalOptimizer()
        
        # –î–∞–Ω–Ω–∏
        self.our_players = []
        self.opponents_data = {}
        self.team_info = {}
        self.tactical_recommendations = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Å–µ—Å–∏—è—Ç–∞
        self.session.headers.update(self.browser_sim.get_brave_headers())
        
        logger.info("üèí Hockey Arena Master AI initialized")
    
    def login_with_human_behavior(self) -> bool:
        """–õ–æ–≥–≤–∞–Ω–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ —á–æ–≤–µ—à–∫–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"""
        logger.info("üîê Starting human-like login process...")
        
        try:
            # –°—Ç—ä–ø–∫–∞ 1: –ü–æ—Å–µ—â–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            logger.debug("üìç Visiting homepage...")
            self.human_behavior.realistic_delay(3.0, 8.0)
            
            home_response = self.session.get(self.base_url, timeout=15)
            if home_response.status_code != 200:
                raise Exception(f"Homepage failed: {home_response.status_code}")
            
            # –°–∏–º—É–ª–∏—Ä–∞–º–µ —á–µ—Ç–µ–Ω–µ
            self.human_behavior.simulate_page_reading(len(home_response.text))
            
            # –°—Ç—ä–ø–∫–∞ 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ login
            logger.debug("üîç Navigating to login page...")
            self.human_behavior.realistic_delay(2.0, 5.0)
            
            login_url = f"{self.base_url}/index.php?p=login&lang=6"
            login_response = self.session.get(login_url, timeout=15)
            
            if login_response.status_code != 200:
                raise Exception(f"Login page failed: {login_response.status_code}")
            
            # –ü–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            soup = BeautifulSoup(login_response.content, 'html.parser')
            form = soup.find('form')
            
            if not form:
                raise Exception("Login form not found")
            
            # –°—Ç—ä–ø–∫–∞ 3: –ü–æ–ø—ä–ª–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            logger.debug("‚å®Ô∏è Filling login form...")
            self.human_behavior.realistic_delay(8.0, 15.0)  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –≤—Ä–µ–º–µ –∑–∞ –≤—ä–≤–µ–∂–¥–∞–Ω–µ
            
            login_data = {
                'nick': self.username,
                'password': self.password,
                'login': '–í–ª–∏–∑–∞–Ω–µ'
            }
            
            # –î–æ–±–∞–≤—è–º–µ —Å–∫—Ä–∏—Ç–∏ –ø–æ–ª–µ—Ç–∞
            for input_tag in form.find_all('input', {'type': 'hidden'}):
                name = input_tag.get('name')
                value = input_tag.get('value', '')
                if name:
                    login_data[name] = value
            
            # –°—Ç—ä–ø–∫–∞ 4: Submit –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            logger.debug("üöÄ Submitting login...")
            self.human_behavior.realistic_delay(1.0, 3.0)
            
            final_response = self.session.post(
                f"{self.base_url}/index.php",
                data=login_data,
                allow_redirects=True,
                timeout=20
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —É—Å–ø–µ—Ö
            success_indicators = ['manager', '–º–µ–Ω–∏–¥–∂—ä—Ä', 'summary']
            
            if (any(indicator in final_response.url.lower() for indicator in success_indicators) or
                any(indicator in final_response.text.lower() for indicator in success_indicators)):
                
                logger.info("‚úÖ Login successful!")
                self.human_behavior.realistic_delay(2.0, 4.0)
                return True
            else:
                raise Exception("Login failed - invalid credentials or website change")
        
        except Exception as e:
            logger.error(f"Login failed: {e}")
            return False
    
    def analyze_our_team(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –Ω–∞—à–∏—è –æ—Ç–±–æ—Ä"""
        logger.info("üë• Analyzing our team...")
        
        try:
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ
            players_url = f"{self.base_url}/manager_team_players.php"
            self.human_behavior.realistic_delay(3.0, 6.0)
            
            response = self.session.get(players_url, timeout=15)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ó–∞–ø–∞–∑–≤–∞–º–µ HTML –∑–∞ debug
            with open('our_players_analysis.html', 'w', encoding='utf-8') as f:
                f.write(response.text)
            
            self.our_players = self._extract_our_players(soup)
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –æ—Ç–±–æ—Ä–∞
            info_url = f"{self.base_url}/manager_summary.php"
            self.human_behavior.realistic_delay(2.0, 4.0)
            
            info_response = self.session.get(info_url, timeout=15)
            info_soup = BeautifulSoup(info_response.content, 'html.parser')
            
            self.team_info = self._extract_team_info(info_soup)
            
            logger.info(f"‚úÖ Team analysis complete: {len(self.our_players)} players analyzed")
            
        except Exception as e:
            logger.error(f"Team analysis failed: {e}")
    
    def _extract_our_players(self, soup: BeautifulSoup) -> List[Dict]:
        """–ò–∑–≤–ª–∏—á–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –Ω–∞—à–∏—Ç–µ –∏–≥—Ä–∞—á–∏"""
        players = []
        
        tables = soup.find_all('table')
        
        for table_idx, table in enumerate(tables):
            rows = table.find_all('tr')
            
            if len(rows) < 2:
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ headers
            header_row = rows[0]
            headers = [th.get_text().strip().lower() for th in header_row.find_all(['th', 'td'])]
            
            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ç–æ–≤–∞ –µ —Ç–∞–±–ª–∏—Ü–∞ —Å –∏–≥—Ä–∞—á–∏
            player_indicators = ['–∏–º–µ', 'name', 'goa', 'def', 'att', 'sho', 'spe', 'str', 'pas', '–≤—ä–∑—Ä–∞—Å—Ç', 'age']
            
            if not any(indicator in ' '.join(headers) for indicator in player_indicators):
                continue
            
            logger.debug(f"Found player table {table_idx + 1} with headers: {headers}")
            
            # –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –∏–≥—Ä–∞—á–∏—Ç–µ
            for row_idx, row in enumerate(rows[1:], 1):
                cells = row.find_all(['td', 'th'])
                
                if len(cells) < 3:
                    continue
                
                player_data = {
                    'source_table': table_idx + 1,
                    'row_number': row_idx
                }
                
                # –ú–∞–ø–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
                for col_idx, cell in enumerate(cells):
                    if col_idx < len(headers):
                        cell_text = cell.get_text().strip()
                        
                        if cell_text and cell_text not in ['-', '', '0']:
                            # –°–ø–µ—Ü–∏–∞–ª–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ —Ç–∏–ø–æ–≤–µ –¥–∞–Ω–Ω–∏
                            header = headers[col_idx]
                            
                            if any(attr in header for attr in ['goa', 'def', 'att', 'sho', 'spe', 'str', 'pas']):
                                # –ê—Ç—Ä–∏–±—É—Ç–∏ - –∏–∑–≤–ª–∏—á–∞–º–µ —á–∏—Å–ª–æ—Ç–æ
                                numbers = re.findall(r'\d+', cell_text)
                                if numbers:
                                    player_data[header] = int(numbers[0])
                            elif '–≤—ä–∑—Ä–∞—Å—Ç' in header or 'age' in header:
                                # –í—ä–∑—Ä–∞—Å—Ç
                                age_match = re.search(r'\d+', cell_text)
                                if age_match:
                                    player_data['age'] = int(age_match.group())
                            elif '—Ñ–æ—Ä–º–∞' in header or 'form' in header:
                                # –§–æ—Ä–º–∞
                                form_match = re.search(r'\d+', cell_text)
                                if form_match:
                                    player_data['form'] = int(form_match.group())
                            elif '–µ–Ω–µ—Ä–≥–∏—è' in header or 'energy' in header:
                                # –ï–Ω–µ—Ä–≥–∏—è
                                energy_match = re.search(r'\d+', cell_text)
                                if energy_match:
                                    player_data['energy'] = int(energy_match.group())
                            else:
                                # –û—Å—Ç–∞–Ω–∞–ª–∏ –ø–æ–ª–µ—Ç–∞ –∫–∞—Ç–æ —Ç–µ–∫—Å—Ç
                                player_data[header] = cell_text
                
                # –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –∏–≥—Ä–∞—á–∞ —Å–∞–º–æ –∞–∫–æ –∏–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –¥–∞–Ω–Ω–∏
                if len(player_data) >= 5:
                    # –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∏–º–µ—Ç–æ
                    player_data['name'] = self._extract_player_name(player_data)
                    
                    # AI –∞–Ω–∞–ª–∏–∑
                    player_data['ai_rating'] = self._calculate_ai_rating(player_data)
                    player_data['best_position'] = self._determine_best_position(player_data)
                    player_data['potential_assessment'] = self._assess_potential(player_data)
                    
                    players.append(player_data)
                    logger.debug(f"Added player: {player_data['name']} (Rating: {player_data['ai_rating']:.1f})")
        
        return players
    
    def _extract_player_name(self, player_data: Dict) -> str:
        """–ò–∑–≤–ª–∏—á–∞ –∏–º–µ—Ç–æ –Ω–∞ –∏–≥—Ä–∞—á–∞"""
        for key, value in player_data.items():
            if '–∏–º–µ' in key.lower() or 'name' in key.lower():
                return str(value)
        
        # –ê–∫–æ –Ω—è–º–∞ –µ–∫—Å–ø–ª–∏—Ü–∏—Ç–Ω–æ –∏–º–µ, —Ç—ä—Ä—Å–∏–º –≤ –¥–∞–Ω–Ω–∏—Ç–µ
        for key, value in player_data.items():
            if isinstance(value, str) and len(value) > 2 and not any(char.isdigit() for char in value):
                return value
        
        return f"Player_{player_data.get('row_number', 'Unknown')}"
    
    def _calculate_ai_rating(self, player_data: Dict) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ AI —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –∏–≥—Ä–∞—á —Å–ø–æ—Ä–µ–¥ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ"""
        attributes = {}
        
        # –ò–∑–≤–ª–∏—á–∞–º–µ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç–∏
        attr_mapping = {
            'goa': ['goa', 'br√°na'],
            'def': ['def', 'obrana', '–∑–∞—â–∏—Ç–∞'],
            'att': ['att', '√∫tok', '–∞—Ç–∞–∫–∞'],
            'sho': ['sho', 'streƒæba', '—Å—Ç—Ä–µ–ª–±–∞'],
            'pas': ['pas', 'nahr√°vka', '–ø–æ–¥–∞–≤–∞–Ω–µ'],
            'str': ['str', 'sila', '—Å–∏–ª–∞'],
            'spe': ['spe', 'r√Ωchlos≈•', '—Å–∫–æ—Ä–æ—Å—Ç'],
            'dis': ['dis', 'sebaovl√°danie', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']
        }
        
        for attr, variations in attr_mapping.items():
            for key, value in player_data.items():
                if any(var in key.lower() for var in variations):
                    if isinstance(value, int):
                        attributes[attr] = value
                        break
                    elif isinstance(value, str):
                        numbers = re.findall(r'\d+', value)
                        if numbers:
                            attributes[attr] = int(numbers[0])
                            break
        
        if not attributes:
            return 0.0
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥
        total_points = sum(attributes.values())
        num_attributes = len(attributes)
        
        if num_attributes == 0:
            return 0.0
        
        base_rating = total_points / num_attributes
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∞–∫–æ –∏–º–∞ –µ–¥–∏–Ω –¥–æ–º–∏–Ω–∏—Ä–∞—â –∞—Ç—Ä–∏–±—É—Ç)
        if attributes:
            max_attr = max(attributes.values())
            avg_attr = sum(attributes.values()) / len(attributes)
            
            if max_attr > avg_attr * 1.3:  # 30% –ø–æ-–≤–∏—Å–æ–∫ –æ—Ç —Å—Ä–µ–¥–Ω–æ—Ç–æ
                specialization_bonus = (max_attr - avg_attr) * 0.1
                base_rating += specialization_bonus
        
        return round(min(100, max(0, base_rating)), 1)
    
    def _determine_best_position(self, player_data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è –Ω–∞–π-–¥–æ–±—Ä–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —Å–ø–æ—Ä–µ–¥ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ"""
        attributes = {}
        
        # –ò–∑–≤–ª–∏—á–∞–º–µ –∞—Ç—Ä–∏–±—É—Ç–∏—Ç–µ
        for key, value in player_data.items():
            if isinstance(value, int) and any(attr in key.lower() for attr in ['goa', 'def', 'att', 'sho', 'pas', 'str', 'spe']):
                attr_name = key.lower()
                if 'goa' in attr_name:
                    attributes['goa'] = value
                elif 'def' in attr_name:
                    attributes['def'] = value
                elif 'att' in attr_name:
                    attributes['att'] = value
                elif 'sho' in attr_name:
                    attributes['sho'] = value
                elif 'pas' in attr_name:
                    attributes['pas'] = value
                elif 'str' in attr_name:
                    attributes['str'] = value
                elif 'spe' in attr_name:
                    attributes['spe'] = value
        
        if not attributes:
            return 'Unknown'
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∑–∞ –≤—Å—è–∫–∞ –ø–æ–∑–∏—Ü–∏—è —Å–ø–æ—Ä–µ–¥ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ—Ç–æ
        position_ratings = {}
        
        # –í—Ä–∞—Ç–∞—Ä: Br√°na (–≥–ª–∞–≤–µ–Ω) + R√Ωchlos≈• + Nahr√°vka –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª –Ω–∞ —à–∞–π–±–∞—Ç–∞
        if 'goa' in attributes:
            gk_rating = (attributes.get('goa', 0) * 0.6 + 
                        attributes.get('spe', 0) * 0.3 + 
                        attributes.get('pas', 0) * 0.1)
            position_ratings['Goalkeeper'] = gk_rating
        
        # –ó–∞—â–∏—Ç–Ω–∏–∫: Obrana (–≥–ª–∞–≤–µ–Ω) + Sila + –æ—Å—Ç–∞–Ω–∞–ª–∏
        def_rating = (attributes.get('def', 0) * 0.4 +
                     attributes.get('str', 0) * 0.25 +
                     attributes.get('spe', 0) * 0.15 +
                     attributes.get('pas', 0) * 0.1 +
                     attributes.get('att', 0) * 0.1)
        position_ratings['Defender'] = def_rating
        
        # –¶–µ–Ω—Ç—ä—Ä: Nahr√°vka (–≤–∞–∂–Ω–∞) + √ötok + Sila (–∑–∞ –≤—Ö–≤—ä—Ä–ª—è–Ω–∏—è)
        center_rating = (attributes.get('pas', 0) * 0.3 +
                        attributes.get('att', 0) * 0.25 +
                        attributes.get('str', 0) * 0.2 +
                        attributes.get('spe', 0) * 0.15 +
                        attributes.get('sho', 0) * 0.1)
        position_ratings['Center'] = center_rating
        
        # –ù–∞–ø–∞–¥–∞—Ç–µ–ª: √ötok + Streƒæba (–≥–ª–∞–≤–Ω–∏)
        forward_rating = (attributes.get('att', 0) * 0.3 +
                         attributes.get('sho', 0) * 0.3 +
                         attributes.get('spe', 0) * 0.2 +
                         attributes.get('pas', 0) * 0.15 +
                         attributes.get('str', 0) * 0.05)
        position_ratings['Forward'] = forward_rating
        
        # –í—Ä—ä—â–∞–º–µ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ —Å –Ω–∞–π-–≤–∏—Å–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥
        if position_ratings:
            best_position = max(position_ratings, key=position_ratings.get)
            return best_position
        
        return 'Unknown'
    
    def _assess_potential(self, player_data: Dict) -> str:
        """–û—Ü–µ–Ω—è–≤–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –Ω–∞ –∏–≥—Ä–∞—á–∞"""
        age = player_data.get('age', 25)
        
        if age < 20:
            return 'Very High'
        elif age < 23:
            return 'High' 
        elif age < 27:
            return 'Good'
        elif age < 30:
            return 'Medium'
        elif age < 33:
            return 'Low'
        else:
            return 'Very Low'
    
    def _extract_team_info(self, soup: BeautifulSoup) -> Dict:
        """–ò–∑–≤–ª–∏—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –æ—Ç–±–æ—Ä–∞"""
        team_info = {}
        
        # –¢—ä—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text = soup.get_text()
        
        # –ò–∑–≤–ª–∏—á–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏
        patterns = {
            'team_name': r'–ú–µ–Ω–æ —Ç—ñ–º—É[:\s]*([^\n]+)',
            'league': r'–õ—ñ–≥–∞[:\s]*([^\n]+)',
            'money': r'–ì–æ—Ç–æ–≤—ñ—Å—Ç—å[:\s]*([^\n]+)',
            'players_count': r'–†–æ—á–µ—Ç –≥—Ä–∞—Ü—ñ–≤[:\s]*([^\n]+)',
            'fans': r'–§–∞–Ω–∫–ª—É–±[:\s]*([^\n]+)'
        }
        
        for key, pattern in patterns.items():
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                team_info[key] = match.group(1).strip()
        
        return team_info
    
    def discover_and_analyze_opponents(self) -> Dict:
        """–û—Ç–∫—Ä–∏–≤–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏"""
        logger.info("üîç Discovering and analyzing opponents...")
        
        opponents = {}
        
        try:
            # –ü–æ–ª—É—á–∞–≤–∞–º–µ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ—Ç–æ
            standings_url = f"{self.base_url}/public_standings.inc"
            self.human_behavior.realistic_delay(3.0, 6.0)
            
            response = self.session.get(standings_url, timeout=15)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ó–∞–ø–∞–∑–≤–∞–º–µ –∑–∞ debug
            with open('league_standings.html', 'w', encoding='utf-8') as f:
                f.write(response.text)
            
            # –ò–∑–≤–ª–∏—á–∞–º–µ –∏–º–µ–Ω–∞—Ç–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∏—Ç–µ
            opponent_names = self._extract_opponent_names_from_standings(soup)
            
            logger.info(f"Found {len(opponent_names)} opponents in league")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ç–æ–ø –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏ (–æ–≥—Ä–∞–Ω–∏—á–∞–≤–∞–º–µ –∑–∞ –≤—Ä–µ–º–µ)
            for i, opponent_name in enumerate(opponent_names[:8], 1):  # –¢–æ–ø 8
                logger.info(f"üéØ Analyzing opponent {i}/8: {opponent_name}")
                
                # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞ –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∏
                self.human_behavior.realistic_delay(4.0, 8.0)
                
                try:
                    analysis = self.opponent_intelligence.analyze_opponent(opponent_name)
                    if analysis and 'error' not in analysis:
                        opponents[opponent_name] = analysis
                        logger.debug(f"‚úÖ {opponent_name} analyzed successfully")
                    else:
                        logger.warning(f"‚ö†Ô∏è Failed to analyze {opponent_name}")
                        
                except Exception as e:
                    logger.error(f"Error analyzing {opponent_name}: {e}")
                    continue
            
            self.opponents_data = opponents
            logger.info(f"‚úÖ Opponent analysis complete: {len(opponents)} teams analyzed")
            
            return opponents
            
        except Exception as e:
            logger.error(f"Opponent discovery failed: {e}")
            return {}
    
    def _extract_opponent_names_from_standings(self, soup: BeautifulSoup) -> List[str]:
        """–ò–∑–≤–ª–∏—á–∞ –∏–º–µ–Ω–∞—Ç–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏—Ç–µ –æ—Ç –∫–ª–∞—Å–∏—Ä–∞–Ω–µ—Ç–æ"""
        opponent_names = []
        
        tables = soup.find_all('table')
        
        for table in tables:
            rows = table.find_all('tr')
            
            # –¢—ä—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–ª–∞—Å–∏—Ä–∞–Ω–µ
            if len(rows) < 3:  # –¢—Ä—è–±–≤–∞ –¥–∞ –∏–º–∞ –ø–æ–Ω–µ header + 2 –æ—Ç–±–æ—Ä–∞
                continue
            
            for row in rows[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–º–µ header
                cells = row.find_all(['td', 'th'])
                
                if len(cells) >= 2:
                    # –û–±–∏–∫–Ω–æ–≤–µ–Ω–æ –∏–º–µ—Ç–æ –Ω–∞ –æ—Ç–±–æ—Ä–∞ –µ –≤—ä–≤ –≤—Ç–æ—Ä–∞—Ç–∞ –∫–æ–ª–æ–Ω–∞
                    team_name_cell = cells[1]
                    team_name = team_name_cell.get_text().strip()
                    
                    # –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –≤–∞–ª–∏–¥–Ω–∏ –∏–º–µ–Ω–∞
                    if (team_name and 
                        len(team_name) > 2 and 
                        team_name not in ['–ò–º–µ –Ω–∞ –æ—Ç–±–æ—Ä–∞', 'Team Name', '–û—Ç–±–æ—Ä'] and
                        not re.match(r'^\d+, team_name)):  # –ù–µ —Å–∞–º–æ —Ü–∏—Ñ—Ä–∏
                        
                        opponent_names.append(team_name)
        
        # –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –¥—É–±–ª–∏—Ä–∞—â–∏ —Å–µ –∏ –≤—Ä—ä—â–∞–º–µ —É–Ω–∏–∫–∞–ª–Ω–∏
        unique_opponents = list(dict.fromkeys(opponent_names))  # –ó–∞–ø–∞–∑–≤–∞ —Ä–µ–¥–∞
        
        return unique_opponents
    
    def generate_optimal_tactics(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–∏ —Ç–∞–∫—Ç–∏–∫–∏"""
        logger.info("‚ö° Generating optimal tactics...")
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –Ω–∞—à–∏—è –æ—Ç–±–æ—Ä
            our_team_analysis = self._analyze_our_team_strength()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Ç–∞–∫—Ç–∏–∫–∏ –∑–∞ –≤—Å–µ–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫
            tactical_plans = {}
            
            for opponent_name, opponent_data in self.opponents_data.items():
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –Ω–∞—à–∏—Ç–µ –∏–≥—Ä–∞—á–∏ –≤ PlayerStats –æ–±–µ–∫—Ç–∏
                    our_player_stats = []
                    for player in self.our_players:
                        player_stat = PlayerStats(
                            name=player.get('name', 'Unknown'),
                            age=player.get('age', 25),
                            position=player.get('best_position', 'Forward'),
                            goa=player.get('goa', 0),
                            def_=player.get('def', 0),
                            att=player.get('att', 0),
                            sho=player.get('sho', 0),
                            pas=player.get('pas', 0),
                            str_=player.get('str', 0),
                            spe=player.get('spe', 0),
                            dis=player.get('dis', 0),
                            energy=player.get('energy', 100),
                            form=player.get('form', 100)
                        )
                        our_player_stats.append(player_stat)
                    
                    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–º–µ —Ç–∞–∫—Ç–∏–∫–∏—Ç–µ
                    optimal_tactics = self.tactical_optimizer.optimize_lineup_and_tactics(
                        our_player_stats, opponent_data
                    )
                    
                    tactical_plans[opponent_name] = optimal_tactics
                    
                except Exception as e:
                    logger.error(f"Tactics generation failed for {opponent_name}: {e}")
                    continue
            
            # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –æ–±—â–∏ —Ç–∞–∫—Ç–∏–∫–∏
            general_tactics = self._generate_general_tactics(our_team_analysis)
            tactical_plans['general'] = general_tactics
            
            self.tactical_recommendations = tactical_plans
            logger.info(f"‚úÖ Tactical optimization complete: {len(tactical_plans)} plans generated")
            
        except Exception as e:
            logger.error(f"Tactical generation failed: {e}")
    
    def _analyze_our_team_strength(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ —Å–∏–ª–∞—Ç–∞ –Ω–∞ –Ω–∞—à–∏—è –æ—Ç–±–æ—Ä"""
        if not self.our_players:
            return {}
        
        analysis = {
            'total_players': len(self.our_players),
            'average_rating': 0,
            'position_distribution': {},
            'age_analysis': {},
            'form_analysis': {},
            'energy_analysis': {}
        }
        
        # –û—Å–Ω–æ–≤–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ratings = [p.get('ai_rating', 0) for p in self.our_players if p.get('ai_rating')]
        if ratings:
            analysis['average_rating'] = sum(ratings) / len(ratings)
        
        # –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        for player in self.our_players:
            pos = player.get('best_position', 'Unknown')
            analysis['position_distribution'][pos] = analysis['position_distribution'].get(pos, 0) + 1
        
        # –í—ä–∑—Ä–∞—Å—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑
        ages = [p.get('age', 25) for p in self.our_players if p.get('age')]
        if ages:
            analysis['age_analysis'] = {
                'average': sum(ages) / len(ages),
                'min': min(ages),
                'max': max(ages),
                'young_players': len([a for a in ages if a < 23]),
                'veteran_players': len([a for a in ages if a > 30])
            }
        
        return analysis
    
    def _generate_general_tactics(self, team_analysis: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ –æ–±—â–∏ —Ç–∞–∫—Ç–∏–∫–∏"""
        avg_rating = team_analysis.get('average_rating', 50)
        
        if avg_rating > 65:
            recommended_style = 'aggressive'
            formation = '1-2-3'
            specialization = 'forechecking'
        elif avg_rating > 50:
            recommended_style = 'balanced'
            formation = '1-3-2'
            specialization = 'short_passes'
        else:
            recommended_style = 'defensive'
            formation = '1-4-1'
            specialization = 'counter_attacks'
        
        return {
            'style': recommended_style,
            'formation': formation,
            'specialization': specialization,
            'general_instructions': [
                f"üéØ –ò–≥—Ä–∞–π—Ç–µ {recommended_style} —Å—Ç–∏–ª",
                f"üèí –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ü–∏—è {formation}",
                f"‚ö° –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}",
                "üí™ –°–ª–µ–¥–µ—Ç–µ –µ–Ω–µ—Ä–≥–∏—è—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ",
                "üîÑ –†–æ—Ç–∏—Ä–∞–π—Ç–µ —Å—ä—Å—Ç–∞–≤–∞ —Ä–µ–¥–æ–≤–Ω–æ"
            ]
        }
    
    # ==================== INTERFACE METHODS ====================
    
    def get_our_players(self) -> List[Dict]:
        """–í—Ä—ä—â–∞ –Ω–∞—à–∏—Ç–µ –∏–≥—Ä–∞—á–∏"""
        return self.our_players
    
    def get_team_rating(self) -> float:
        """–í—Ä—ä—â–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∞"""
        if not self.our_players:
            return 0.0
        
        ratings = [p.get('ai_rating', 0) for p in self.our_players if p.get('ai_rating')]
        return sum(ratings) / len(ratings) if ratings else 0.0
    
    def get_next_opponent(self) -> str:
        """–í—Ä—ä—â–∞ —Å–ª–µ–¥–≤–∞—â–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫"""
        # –í —Ä–µ–∞–ª–Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—è —Ç–æ–≤–∞ —â–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
        if self.opponents_data:
            return list(self.opponents_data.keys())[0]
        return "Unknown"
    
    def get_recommended_tactic(self) -> str:
        """–í—Ä—ä—â–∞ –ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–∞—Ç–∞ —Ç–∞–∫—Ç–∏–∫–∞"""
        if self.tactical_recommendations and 'general' in self.tactical_recommendations:
            return self.tactical_recommendations['general'].get('specialization', 'Unknown')
        return "Not analyzed"
    
    def get_team_info_summary(self) -> str:
        """–í—Ä—ä—â–∞ –æ–±–æ–±—â–µ–Ω–∏–µ –∑–∞ –æ—Ç–±–æ—Ä–∞"""
        if not self.team_info:
            return "–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –æ—Ç–±–æ—Ä–∞"
        
        summary = "üèí –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ó–ê –û–¢–ë–û–†–ê\n"
        summary += "=" * 40 + "\n\n"
        
        for key, value in self.team_info.items():
            summary += f"‚Ä¢ {key.replace('_', ' ').title()}: {value}\n"
        
        return summary
    
    def get_detailed_team_stats(self) -> str:
        """–í—Ä—ä—â–∞ –¥–µ—Ç–∞–π–ª–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ—Ç–±–æ—Ä–∞"""
        if not self.our_players:
            return "–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∏–≥—Ä–∞—á–∏"
        
        stats = "üìä –î–ï–¢–ê–ô–õ–ù–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò\n"
        stats += "=" * 40 + "\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_players = len(self.our_players)
        ratings = [p.get('ai_rating', 0) for p in self.our_players if p.get('ai_rating')]
        avg_rating = sum(ratings) / len(ratings) if ratings else 0
        
        stats += f"üìà –û–ë–©–ò –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
        stats += f"‚Ä¢ –û–±—â–æ –∏–≥—Ä–∞—á–∏: {total_players}\n"
        stats += f"‚Ä¢ –°—Ä–µ–¥–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/100\n"
        stats += f"‚Ä¢ –ù–∞–π-–≤–∏—Å–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥: {max(ratings) if ratings else 0:.1f}\n"
        stats += f"‚Ä¢ –ù–∞–π-–Ω–∏—Å—ä–∫ —Ä–µ–π—Ç–∏–Ω–≥: {min(ratings) if ratings else 0:.1f}\n\n"
        
        # –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        positions = {}
        for player in self.our_players:
            pos = player.get('best_position', 'Unknown')
            positions[pos] = positions.get(pos, 0) + 1
        
        stats += f"üìç –†–ê–ó–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–û–ó–ò–¶–ò–ò:\n"
        for pos, count in positions.items():
            stats += f"‚Ä¢ {pos}: {count} –∏–≥—Ä–∞—á–∏\n"
        stats += "\n"
        
        # –í—ä–∑—Ä–∞—Å—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑
        ages = [p.get('age', 25) for p in self.our_players if p.get('age')]
        if ages:
            avg_age = sum(ages) / len(ages)
            stats += f"üë• –í–™–ó–†–ê–°–¢–û–í –ê–ù–ê–õ–ò–ó:\n"
            stats += f"‚Ä¢ –°—Ä–µ–¥–Ω–∞ –≤—ä–∑—Ä–∞—Å—Ç: {avg_age:.1f} –≥–æ–¥–∏–Ω–∏\n"
            stats += f"‚Ä¢ –ù–∞–π-–º–ª–∞–¥: {min(ages)} –≥–æ–¥–∏–Ω–∏\n"
            stats += f"‚Ä¢ –ù–∞–π-–≤—ä–∑—Ä–∞—Å—Ç–µ–Ω: {max(ages)} –≥–æ–¥–∏–Ω–∏\n"
            stats += f"‚Ä¢ –ú–ª–∞–¥–∏ –∏–≥—Ä–∞—á–∏ (<23): {len([a for a in ages if a < 23])}\n"
            stats += f"‚Ä¢ –í–µ—Ç–µ—Ä–∞–Ω–∏ (>30): {len([a for a in ages if a > 30])}\n\n"
        
        # –¢–æ–ø 5 –∏–≥—Ä–∞—á–∏
        top_players = sorted(self.our_players, key=lambda p: p.get('ai_rating', 0), reverse=True)[:5]
        stats += f"üåü –¢–û–ü 5 –ò–ì–†–ê–ß–ò:\n"
        for i, player in enumerate(top_players, 1):
            name = player.get('name', 'Unknown')
            rating = player.get('ai_rating', 0)
            position = player.get('best_position', 'Unknown')
            stats += f"{i}. {name} - {rating:.1f} ({position})\n"
        
        return stats
    
    def get_team_recommendations(self) -> str:
        """–í—Ä—ä—â–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –∑–∞ –æ—Ç–±–æ—Ä–∞"""
        if not self.our_players:
            return "–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏"
        
        recs = "üí° AI –ü–†–ï–ü–û–†–™–ö–ò –ó–ê –û–¢–ë–û–†–ê\n"
        recs += "=" * 40 + "\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
        team_analysis = self._analyze_our_team_strength()
        avg_rating = team_analysis.get('average_rating', 0)
        
        recs += "üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–ò –ü–†–ï–ü–û–†–™–ö–ò:\n"
        
        if avg_rating < 45:
            recs += "‚Ä¢ üî¥ –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–±–æ—Ä—ä—Ç —Å–µ –Ω—É–∂–¥–∞–µ –æ—Ç —Å–ø–µ—à–Ω–∏ –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è\n"
            recs += "‚Ä¢ üìà –§–æ–∫—É—Å–∏—Ä–∞–π—Ç–µ —Å–µ –≤—ä—Ä—Ö—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç–∏\n"
            recs += "‚Ä¢ üîÑ –¢—ä—Ä—Å–µ—Ç–µ –Ω–æ–≤–∏ –∏–≥—Ä–∞—á–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–∏—è –ø–∞–∑–∞—Ä\n"
        elif avg_rating < 60:
            recs += "‚Ä¢ üü° –û—Ç–±–æ—Ä—ä—Ç –∏–º–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∑–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∏–µ\n"
            recs += "‚Ä¢ üèãÔ∏è –ò–Ω—Ç–µ–Ω–∑–∏–≤–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –∫–ª—é—á–æ–≤–∏—Ç–µ –∏–≥—Ä–∞—á–∏\n"
            recs += "‚Ä¢ üéØ –§–æ–∫—É—Å –≤—ä—Ä—Ö—É —Å–ª–∞–±–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏\n"
        else:
            recs += "‚Ä¢ üü¢ –°–∏–ª–µ–Ω –æ—Ç–±–æ—Ä - –ø–æ–¥–¥—ä—Ä–∂–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∞\n"
            recs += "‚Ä¢ ‚≠ê –ò–Ω–≤–µ—Å—Ç–∏—Ä–∞–π—Ç–µ –≤ –º–ª–∞–¥–∏ —Ç–∞–ª–∞–Ω—Ç–∏\n"
            recs += "‚Ä¢ üèÜ –§–æ–∫—É—Å–∏—Ä–∞–π—Ç–µ —Å–µ –≤—ä—Ä—Ö—É —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ —É—Å—ä–≤—ä—Ä—à–µ–Ω—Å—Ç–≤–∞–Ω–µ\n"
        
        recs += "\n"
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
        positions = team_analysis.get('position_distribution', {})
        
        recs += "üìç –ü–û–ó–ò–¶–ò–û–ù–ù–ò –ü–†–ï–ü–û–†–™–ö–ò:\n"
        
        position_needs = {
            'Goalkeeper': 2,
            'Defender': 6,
            'Center': 4,
            'Forward': 8
        }
        
        for pos, needed in position_needs.items():
            current = positions.get(pos, 0)
            if current < needed:
                recs += f"‚Ä¢ ‚ö†Ô∏è –ù—É–∂–Ω–∏ —Å–∞ {needed - current} {pos.lower()}(s)\n"
            elif current == needed:
                recs += f"‚Ä¢ ‚úÖ –î–æ–±—Ä–æ –ø–æ–∫—Ä–∏—Ç–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—è {pos.lower()}\n"
            else:
                recs += f"‚Ä¢ üìä –î–æ–±—Ä–∞ –¥—ä–ª–±–æ—á–∏–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—è {pos.lower()}\n"
        
        recs += "\n"
        
        # –í—ä–∑—Ä–∞—Å—Ç–æ–≤–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
        age_analysis = team_analysis.get('age_analysis', {})
        avg_age = age_analysis.get('average', 25)
        
        recs += "üë• –í–™–ó–†–ê–°–¢–û–í–ò –ü–†–ï–ü–û–†–™–ö–ò:\n"
        
        if avg_age > 29:
            recs += "‚Ä¢ üîÑ –û—Ç–±–æ—Ä—ä—Ç –∑–∞—Å—Ç–∞—Ä—è–≤–∞ - —Ç—ä—Ä—Å–µ—Ç–µ –º–ª–∞–¥–∏ –∏–≥—Ä–∞—á–∏\n"
            recs += "‚Ä¢ üí™ –û–±—ä—Ä–Ω–µ—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞\n"
        elif avg_age < 22:
            recs += "‚Ä¢ üå± –ú–ª–∞–¥ –æ—Ç–±–æ—Ä - —Ñ–æ–∫—É—Å–∏—Ä–∞–π—Ç–µ —Å–µ –≤—ä—Ä—Ö—É —Ä–∞–∑–≤–∏—Ç–∏–µ—Ç–æ\n"
            recs += "‚Ä¢ üìö –ò–Ω–≤–µ—Å—Ç–∏—Ä–∞–π—Ç–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ–ø–∏—Ç\n"
        else:
            recs += "‚Ä¢ ‚öñÔ∏è –î–æ–±—ä—Ä –≤—ä–∑—Ä–∞—Å—Ç–æ–≤ –±–∞–ª–∞–Ω—Å\n"
            recs += "‚Ä¢ üéØ –ü—Ä–æ–¥—ä–ª–∂–µ—Ç–µ —Å –Ω–∞—Å—Ç–æ—è—â–∞—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
        
        # –û–±—â–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
        recs += "\nüéÆ –û–ë–©–ò –ü–†–ï–ü–û–†–™–ö–ò:\n"
        recs += "‚Ä¢ üìä –†–µ–¥–æ–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–π—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏—Ç–µ\n"
        recs += "‚Ä¢ ‚ö° –ê–¥–∞–ø—Ç–∏—Ä–∞–π—Ç–µ —Ç–∞–∫—Ç–∏–∫–∏—Ç–µ —Å–ø–æ—Ä–µ–¥ –º–∞—á–∞\n"
        recs += "‚Ä¢ üí™ –°–ª–µ–¥–µ—Ç–µ –µ–Ω–µ—Ä–≥–∏—è—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ\n"
        recs += "‚Ä¢ üîÑ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—è—Ç–∞ —Ä–∞–∑—É–º–Ω–æ\n"
        recs += "‚Ä¢ üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–∞–π—Ç–µ –≤ –¥—ä–ª–≥–æ—Å—Ä–æ—á–Ω–æ —Ä–∞–∑–≤–∏—Ç–∏–µ\n"
        
        return recs
    
    def analyze_specific_opponent(self, opponent_name: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫"""
        return self.opponent_intelligence.analyze_opponent(opponent_name)
    
    def discover_all_league_opponents(self) -> List[str]:
        """–û—Ç–∫—Ä–∏–≤–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏ –≤ –ª–∏–≥–∞—Ç–∞"""
        try:
            standings_url = f"{self.base_url}/public_standings.inc"
            response = self.session.get(standings_url, timeout=15)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            return self._extract_opponent_names_from_standings(soup)
        except Exception as e:
            logger.error(f"Failed to discover opponents: {e}")
            return []
    
    def optimize_tactics_for_formation(self, formation: str, specialization: str) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞ —Ç–∞–∫—Ç–∏–∫–∏—Ç–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Ñ–æ—Ä–º–∞—Ü–∏—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
            spec_data = TACTICAL_SPECIALIZATIONS.get(specialization, {})
            
            optimization = {
                'formation': formation,
                'specialization': specialization,
                'lineup_details': self._generate_lineup_for_formation(formation),
                'tactical_tips': self._generate_formation_tips(formation, specialization),
                'rotation_plan': self._generate_rotation_plan()
            }
            
            return optimization
            
        except Exception as e:
            logger.error(f"Formation optimization failed: {e}")
            return {'error': str(e)}
    
    def _generate_lineup_for_formation(self, formation: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ —Å—ä—Å—Ç–∞–≤ –∑–∞ —Ñ–æ—Ä–º–∞—Ü–∏—è"""
        if not self.our_players:
            return "–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∏–≥—Ä–∞—á–∏"
        
        lineup = f"üìã –û–ü–¢–ò–ú–ê–õ–ï–ù –°–™–°–¢–ê–í –ó–ê –§–û–†–ú–ê–¶–ò–Ø {formation}:\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –∏–≥—Ä–∞—á–∏—Ç–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥
        goalkeepers = [p for p in self.our_players if p.get('best_position') == 'Goalkeeper']
        defenders = [p for p in self.our_players if p.get('best_position') == 'Defender']
        centers = [p for p in self.our_players if p.get('best_position') == 'Center']
        forwards = [p for p in self.our_players if p.get('best_position') == 'Forward']
        
        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥
        for position_list in [goalkeepers, defenders, centers, forwards]:
            position_list.sort(key=lambda p: p.get('ai_rating', 0), reverse=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å—ä—Å—Ç–∞–≤–∞ —Å–ø–æ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞
        if formation == '1-4-1':
            lineup += "ü•Ö –í–†–ê–¢–ê–†:\n"
            if goalkeepers:
                gk = goalkeepers[0]
                lineup += f"‚Ä¢ {gk['name']} (–†–µ–π—Ç–∏–Ω–≥: {gk.get('ai_rating', 0):.1f})\n\n"
            
            lineup += "üõ°Ô∏è –ó–ê–©–ò–¢–ù–ò–¶–ò (4):\n"
            for i, defender in enumerate(defenders[:4], 1):
                lineup += f"{i}. {defender['name']} (–†–µ–π—Ç–∏–Ω–≥: {defender.get('ai_rating', 0):.1f})\n"
            
            lineup += "\n‚ö° –ù–ê–ü–ê–î–ê–¢–ï–õ–ò (1):\n"
            if forwards:
                fw = forwards[0]
                lineup += f"‚Ä¢ {fw['name']} (–†–µ–π—Ç–∏–Ω–≥: {fw.get('ai_rating', 0):.1f})\n"
        
        elif formation == '1-3-2':
            lineup += "ü•Ö –í–†–ê–¢–ê–†:\n"
            if goalkeepers:
                gk = goalkeepers[0]
                lineup += f"‚Ä¢ {gk['name']} (–†–µ–π—Ç–∏–Ω–≥: {gk.get('ai_rating', 0):.1f})\n\n"
            
            lineup += "üõ°Ô∏è –ó–ê–©–ò–¢–ù–ò–¶–ò (3):\n"
            for i, defender in enumerate(defenders[:3], 1):
                lineup += f"{i}. {defender['name']} (–†–µ–π—Ç–∏–Ω–≥: {defender.get('ai_rating', 0):.1f})\n"
            
            lineup += "\n‚ö° –ù–ê–ü–ê–î–ê–¢–ï–õ–ò (2):\n"
            for i, forward in enumerate(forwards[:2], 1):
                lineup += f"{i}. {forward['name']} (–†–µ–π—Ç–∏–Ω–≥: {forward.get('ai_rating', 0):.1f})\n"
        
        elif formation == '1-2-3':
            lineup += "ü•Ö –í–†–ê–¢–ê–†:\n"
            if goalkeepers:
                gk = goalkeepers[0]
                lineup += f"‚Ä¢ {gk['name']} (–†–µ–π—Ç–∏–Ω–≥: {gk.get('ai_rating', 0):.1f})\n\n"
            
            lineup += "üõ°Ô∏è –ó–ê–©–ò–¢–ù–ò–¶–ò (2):\n"
            for i, defender in enumerate(defenders[:2], 1):
                lineup += f"{i}. {defender['name']} (–†–µ–π—Ç–∏–Ω–≥: {defender.get('ai_rating', 0):.1f})\n"
            
            lineup += "\n‚ö° –ù–ê–ü–ê–î–ê–¢–ï–õ–ò (3):\n"
            for i, forward in enumerate(forwards[:3], 1):
                lineup += f"{i}. {forward['name']} (–†–µ–π—Ç–∏–Ω–≥: {forward.get('ai_rating', 0):.1f})\n"
        
        return lineup
    
    def _generate_formation_tips(self, formation: str, specialization: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ —Å—ä–≤–µ—Ç–∏ –∑–∞ —Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        tips = []
        
        # –°—ä–≤–µ—Ç–∏ –∑–∞ —Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞
        formation_tips = {
            '1-4-1': [
                "üõ°Ô∏è –°–∏–ª–Ω–∞ –∑–∞—â–∏—Ç–∞ - –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –∑–∞ –∫–æ–Ω—Ç—Ä–∞–∞—Ç–∞–∫–∏",
                "‚è±Ô∏è –ò–≥—Ä–∞–π—Ç–µ —Ç—ä—Ä–ø–µ–ª–∏–≤–æ –∏ —á–∞–∫–∞–π—Ç–µ –º–æ–º–µ–Ω—Ç–∞",
                "üéØ –§–æ–∫—É—Å–∏—Ä–∞–π—Ç–µ —Å–µ –≤—ä—Ä—Ö—É –µ–¥–∏–Ω –Ω–∞–ø–∞–¥–∞—Ç–µ–ª"
            ],
            '1-3-2': [
                "‚öñÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–∞–Ω–∞ —Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤—Å–∏—á–∫–∏ —Å–∏—Ç—É–∞—Ü–∏–∏",
                "üîÑ –î–æ–±—Ä–∞ –∑–∞ —Ä–æ—Ç–∞—Ü–∏—è –∏ –∞–¥–∞–ø—Ç–∏—Ä–∞–Ω–µ",
                "üí™ –°—Ç–∞–±–∏–ª–Ω–∞ –æ—Å–Ω–æ–≤–∞ –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ"
            ],
            '1-2-3': [
                "‚ö° –ê–≥—Ä–µ—Å–∏–≤–Ω–∞ –∞—Ç–∞–∫—É–≤–∞—â–∞ —Ñ–æ—Ä–º–∞—Ü–∏—è",
                "üéØ –ú–∞–∫—Å–∏–º–∞–ª–µ–Ω –Ω–∞—Ç–∏—Å–∫ –≤ –∞—Ç–∞–∫–∞",
                "‚ö†Ô∏è –í–Ω–∏–º–∞–≤–∞–π—Ç–µ —Å –∑–∞—â–∏—Ç–∞—Ç–∞ –ø—Ä–∏ –∫–æ–Ω—Ç—Ä–∞–∞—Ç–∞–∫–∏"
            ]
        }
        
        tips.extend(formation_tips.get(formation, []))
        
        # –°—ä–≤–µ—Ç–∏ –∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞
        spec_data = TACTICAL_SPECIALIZATIONS.get(specialization)
        if spec_data:
            tips.append(f"üéØ {spec_data.description}")
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∏ —Å—ä–≤–µ—Ç–∏ —Å–ø–æ—Ä–µ–¥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞
            if specialization == 'counter_attacks':
                tips.extend([
                    "üõ°Ô∏è –ò–≥—Ä–∞–π—Ç–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ –≤ –∑–∞—â–∏—Ç–∞",
                    "‚ö° –ë—ä–¥–µ—Ç–µ –≥–æ—Ç–æ–≤–∏ –∑–∞ –±—ä—Ä–∑–∏ –∫–æ–Ω—Ç—Ä–∞–∞—Ç–∞–∫–∏",
                    "üéØ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—Ç–∞ –Ω–∞ –Ω–∞–ø–∞–¥–∞—Ç–µ–ª–∏—Ç–µ"
                ])
            elif specialization == 'forechecking':
                tips.extend([
                    "üí™ –ê–≥—Ä–µ—Å–∏–≤–Ω–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–µ –≤ —á—É–∂–¥–∞—Ç–∞ –∑–æ–Ω–∞",
                    "üèÉ –í–∏—Å–æ–∫–æ —Ç–µ–º–ø–æ –Ω–∞ –∏–≥—Ä–∞—Ç–∞",
                    "‚ö†Ô∏è –í–Ω–∏–º–∞–≤–∞–π—Ç–µ —Å –µ–Ω–µ—Ä–≥–∏—è—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ"
                ])
            elif specialization == 'short_passes':
                tips.extend([
                    "üéØ –ü—Ä–µ—Ü–∏–∑–Ω–∏ –∫—Ä–∞—Ç–∫–∏ –ø–æ–¥–∞–≤–∞–Ω–∏—è",
                    "üß† –¢—ä—Ä–ø–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–≥—Ä–∞–∂–¥–∞–Ω–µ –Ω–∞ –∞—Ç–∞–∫–∏—Ç–µ",
                    "üìç –î–æ–±—Ä–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞ –∏–≥—Ä–∞"
                ])
        
        return tips
    
    def _generate_rotation_plan(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ –ø–ª–∞–Ω –∑–∞ —Ä–æ—Ç–∞—Ü–∏—è"""
        plan = "üîÑ –ü–õ–ê–ù –ó–ê –†–û–¢–ê–¶–ò–Ø:\n\n"
        
        plan += "‚ö° –û–°–ù–û–í–ù–ò –ü–†–ò–ù–¶–ò–ü–ò:\n"
        plan += "‚Ä¢ –†–æ—Ç–∏—Ä–∞–π—Ç–µ –∏–≥—Ä–∞—á–∏—Ç–µ –ø—Ä–∏ –µ–Ω–µ—Ä–≥–∏—è –ø–æ–¥ 70%\n"
        plan += "‚Ä¢ –î–∞–≤–∞–π—Ç–µ –ø–æ—á–∏–≤–∫–∞ –Ω–∞ –∫–ª—é—á–æ–≤–∏—Ç–µ –∏–≥—Ä–∞—á–∏ –≤ –ø–æ-–ª–µ–∫–∏ –º–∞—á–æ–≤–µ\n"
        plan += "‚Ä¢ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –º–ª–∞–¥–∏—Ç–µ –∏–≥—Ä–∞—á–∏ –∑–∞ –Ω–∞—Ç—Ä—É–ø–≤–∞–Ω–µ –Ω–∞ –æ–ø–∏—Ç\n"
        plan += "‚Ä¢ –°–ª–µ–¥–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∞ - –∏–≥—Ä–∞—á–∏ –≤ –ª–æ—à–∞ —Ñ–æ—Ä–º–∞ –ø–æ—á–∏–≤–∞—Ç\n\n"
        
        plan += "üìÖ –°–ï–î–ú–ò–ß–ï–ù –ì–†–ê–§–ò–ö:\n"
        plan += "‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫: –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∏–∑–º–∏–Ω–∞–ª–∏—è –º–∞—á\n"
        plan += "‚Ä¢ –í—Ç–æ—Ä–Ω–∏–∫-–°—Ä—è–¥–∞: –û—Å–Ω–æ–≤–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        plan += "‚Ä¢ –ß–µ—Ç–≤—ä—Ä—Ç—ä–∫: –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞\n"
        plan += "‚Ä¢ –ü–µ—Ç—ä–∫: –õ–µ–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ + –ø–æ—á–∏–≤–∫–∞\n"
        plan += "‚Ä¢ –°—ä–±–æ—Ç–∞: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞ –º–∞—á\n"
        plan += "‚Ä¢ –ù–µ–¥–µ–ª—è: –ú–∞—á –∏–ª–∏ –ø–æ—á–∏–≤–∫–∞\n\n"
        
        plan += "‚ö†Ô∏è –í–ê–ñ–ù–ò –ë–ï–õ–ï–ñ–ö–ò:\n"
        plan += "‚Ä¢ –í—Ä–∞—Ç–∞—Ä–∏—Ç–µ —Å–µ —É–º–æ—Ä—è–≤–∞—Ç —Å–ø–æ—Ä–µ–¥ –±—Ä–æ—è —Å—Ç—Ä–µ–ª–±–∏\n"
        plan += "‚Ä¢ –ú–ª–∞–¥–∏—Ç–µ –∏–≥—Ä–∞—á–∏ —Å–µ —Ä–∞–∑–≤–∏–≤–∞—Ç –ø–æ-–±—ä—Ä–∑–æ\n"
        plan += "‚Ä¢ –°–ª–µ–¥–µ—Ç–µ –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –ø–æ—á–∏–≤–∫–∞ –∏ –∏–≥—Ä–æ–≤–æ –≤—Ä–µ–º–µ\n"
        
        return plan
    
    def generate_comprehensive_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ –ø—ä–ª–µ–Ω –æ—Ç—á–µ—Ç"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"hockey_arena_comprehensive_report_{timestamp}.txt"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("üèí HOCKEY ARENA MASTER AI - –ü–™–õ–ï–ù –û–¢–ß–ï–¢\n")
                f.write("=" * 70 + "\n")
                f.write(f"–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")
                f.write(f"–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª: {self.username}\n\n")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –æ—Ç–±–æ—Ä–∞
                f.write(self.get_team_info_summary())
                f.write("\n\n")
                
                # –î–µ—Ç–∞–π–ª–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                f.write(self.get_detailed_team_stats())
                f.write("\n\n")
                
                # –ü—Ä–µ–ø–æ—Ä—ä–∫–∏
                f.write(self.get_team_recommendations())
                f.write("\n\n")
                
                # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏
                if self.opponents_data:
                    f.write("üéØ –ê–ù–ê–õ–ò–ó –ù–ê –ü–†–û–¢–ò–í–ù–ò–¶–ò\n")
                    f.write("=" * 40 + "\n\n")
                    
                    for opponent_name, opponent_data in self.opponents_data.items():
                        f.write(f"üìä {opponent_name}:\n")
                        f.write(f"‚Ä¢ –°–∏–ª–∞: {opponent_data.get('strength_rating', 0):.1f}/100\n")
                        f.write(f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ –ø–æ–±–µ–¥–∞: {opponent_data.get('win_probability', 50):.1f}%\n")
                        f.write(f"‚Ä¢ –°–∏–ª–Ω–∏ —Å—Ç—Ä–∞–Ω–∏: {', '.join(opponent_data.get('strengths', []))}\n")
                        f.write(f"‚Ä¢ –°–ª–∞–±–æ—Å—Ç–∏: {', '.join(opponent_data.get('weaknesses', []))}\n\n")
                
                # –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
                if self.tactical_recommendations:
                    f.write("‚ö° –¢–ê–ö–¢–ò–ß–ï–°–ö–ò –ü–†–ï–ü–û–†–™–ö–ò\n")
                    f.write("=" * 40 + "\n\n")
                    
                    general = self.tactical_recommendations.get('general', {})
                    f.write(f"üéØ –û–±—â —Å—Ç–∏–ª: {general.get('style', 'Unknown')}\n")
                    f.write(f"üèí –ü—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–∞ —Ñ–æ—Ä–º–∞—Ü–∏—è: {general.get('formation', 'Unknown')}\n")
                    f.write(f"‚ö° –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {general.get('specialization', 'Unknown')}\n\n")
                
                # –°–∏—Å—Ç–µ–º–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                f.write("üîß –°–ò–°–¢–ï–ú–ù–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n")
                f.write("=" * 40 + "\n")
                f.write(f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∏–≥—Ä–∞—á–∏: {len(self.our_players)}\n")
                f.write(f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏: {len(self.opponents_data)}\n")
                f.write(f"‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–ª–∞–Ω–æ–≤–µ: {len(self.tactical_recommendations)}\n")
                f.write(f"‚Ä¢ –í–µ—Ä—Å–∏—è –Ω–∞ AI: Hockey Arena Master AI v4.0\n")
            
            logger.info(f"‚úÖ Comprehensive report generated: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"Report generation failed: {e}")
            raise e

# ==================== MAIN FUNCTION ====================

def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è - —Å—Ç–∞—Ä—Ç–∏—Ä–∞ GUI —Å–∏—Å—Ç–µ–º–∞—Ç–∞"""
    
    print("üèí HOCKEY ARENA MASTER AI v4.0")
    print("üß† –ù–∞–π-–Ω–∞–ø—Ä–µ–¥–Ω–∞–ª–∞—Ç–∞ AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞ –¥–æ–º–∏–Ω–∏—Ä–∞–Ω–µ –≤ Hockey Arena")
    print("üìö –ë–∞–∑–∏—Ä–∞–Ω–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–æ—Ç–æ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ –æ—Ç ha-navod.eu")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ —Ä–∞–±–æ—Ç–Ω–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    print(f"üìÅ Work directory: {os.getcwd()}")
    
    try:
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ GUI
        print("üñ•Ô∏è Starting GUI interface...")
        gui = HockeyArenaGUI()
        gui.run()
        
    except ImportError as e:
        print(f"‚ùå GUI libraries missing: {e}")
        print("üìù Please install required packages:")
        print("   pip install tkinter matplotlib seaborn")
        
    except Exception as e:
        print(f"üí• Unexpected error: {str(e)}")
        logger.error(f"Main execution error: {str(e)}")
        
        # Fallback —Ä–µ–∂–∏–º
        print("\nüìù Attempting console fallback...")
        try:
            run_console_fallback()
        except Exception as fallback_error:
            print(f"‚ùå Console fallback also failed: {fallback_error}")

def run_console_fallback():
    """–ö–æ–Ω–∑–æ–ª–µ–Ω fallback —Ä–µ–∂–∏–º"""
    print("\n" + "="*50)
    print("üìù CONSOLE MODE (Fallback)")
    print("="*50)
    
    username = input("Username: ").strip()
    password = input("Password: ").strip()
    
    if not username or not password:
        print("‚ùå Username and password required!")
        return
    
    print(f"\nüöÄ Starting console analysis for: {username}")
    
    try:
        ai = HockeyArenaMasterAI(username, password)
        
        # –û–ø—Ä–æ—Å—Ç–µ–Ω –∞–Ω–∞–ª–∏–∑
        print("üîê Logging in...")
        if not ai.login_with_human_behavior():
            print("‚ùå Login failed!")
            return
        
        print("üë• Analyzing team...")
        ai.analyze_our_team()
        
        print("üéØ Analyzing opponents...")
        ai.discover_and_analyze_opponents()
        
        print("‚ö° Generating tactics...")
        ai.generate_optimal_tactics()
        
        # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
        print("\n" + "="*50)
        print("üìä ANALYSIS RESULTS")
        print("="*50)
        
        print(f"Team Rating: {ai.get_team_rating():.1f}/100")
        print(f"Players Analyzed: {len(ai.our_players)}")
        print(f"Opponents Analyzed: {len(ai.opponents_data)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç
        report_file = ai.generate_comprehensive_report()
        print(f"\n‚úÖ Full report saved: {report_file}")
        
        print("\nüéâ Console analysis completed!")
        
    except Exception as e:
        print(f"‚ùå Console analysis failed: {str(e)}")

if __name__ == "__main__":
    main()