#!/usr/bin/env python3
"""
üèí ENHANCED HOCKEY ARENA INTELLIGENT SCRAPER
===========================================
–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω scraper —Å AI –∞–Ω–∞–ª–∏–∑–∏ –∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –∑–∞ Hockey Arena
–í–µ—Ä—Å–∏—è: 2.0 - Enhanced Edition
"""

import requests
from bs4 import BeautifulSoup
import json
import time
from datetime import datetime, timedelta
import re
import csv
import random
import math
from typing import Dict, List, Optional, Tuple
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class IntelligentHockeyAnalyzer:
    def __init__(self, username: str, password: str):
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.base_url = "https://www.hockeyarena.net"
        
        # –ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞ –¥–∞–Ω–Ω–∏
        self.data = {
            'team_info': {},
            'players': [],
            'youth_players': [],
            'market_data': [],
            'finances': {},
            'tactics': {},
            'training': {},
            'matches': [],
            'standings': {},
            'statistics': {},
            'ai_analysis': {},
            'recommendations': [],
            'transfer_targets': [],
            'tactical_suggestions': [],
            'training_plan': {}
        }
        
        # Human-like headers –∑–∞ –∏–∑–±—è–≥–≤–∞–Ω–µ –Ω–∞ detection
        self.session.headers.update({
            'User-Agent': self._get_random_user_agent(),
            'Accept-Language': 'bg-BG,bg;q=0.9,en;q=0.8',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Cache-Control': 'max-age=0'
        })
        
        # –°—Ç—Ä–∞–Ω–∏—Ü–∏—Ç–µ –∑–∞ –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        self.analysis_pages = {
            'critical': {
                'players': 'manager_team_players.php',
                'finances': 'manager_finance_report.inc',
                'tactics': 'manager_tactics_form.php',
                'market': 'manager_market_list.php',
                'youth_school': 'manager_youthacademy_players.php'
            },
            'important': {
                'training': 'manager_training_form1.php',
                'matches': 'manager_matches.php',
                'standings': 'public_standings.inc',
                'statistics': 'manager_team_statistics.php'
            },
            'optional': {
                'calendar': 'manager_calendar.php',
                'stadium': 'manager_stadium.php',
                'scouting': 'manager_scouting.php',
                'lineup': 'manager_lineup.php'
            }
        }
        
        # –•–æ–∫–µ–π–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ –≤–∞–∂–Ω–æ—Å—Ç –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∏—Ç–µ
        self.position_weights = {
            'goalkeeper': {'goa': 0.4, 'def': 0.2, 'str': 0.2, 'spe': 0.1, 'att': 0.05, 'sho': 0.05, 'pas': 0.0},
            'defenseman': {'def': 0.3, 'str': 0.25, 'pas': 0.2, 'goa': 0.0, 'spe': 0.15, 'att': 0.05, 'sho': 0.05},
            'forward': {'att': 0.25, 'sho': 0.25, 'spe': 0.2, 'pas': 0.15, 'str': 0.1, 'def': 0.05, 'goa': 0.0},
            'center': {'pas': 0.25, 'att': 0.2, 'sho': 0.2, 'spe': 0.15, 'str': 0.1, 'def': 0.1, 'goa': 0.0}
        }

    def _get_random_user_agent(self) -> str:
        """–í—Ä—ä—â–∞ —Å–ª—É—á–∞–µ–Ω user agent –∑–∞ –∏–º–∏—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –±—Ä–∞—É–∑—ä—Ä–∏"""
        user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        ]
        return random.choice(user_agents)

    def _human_delay(self, min_seconds: float = 1.5, max_seconds: float = 4.0):
        """–ß–æ–≤–µ—à–∫–∏ delay –º–µ–∂–¥—É –∑–∞—è–≤–∫–∏—Ç–µ"""
        delay = random.uniform(min_seconds, max_seconds)
        # –ü–æ–Ω—è–∫–æ–≥–∞ –ø—Ä–∞–≤–∏–º –ø–æ-–¥—ä–ª–≥–∏ –ø–∞—É–∑–∏ –∫–∞—Ç–æ –∏—Å—Ç–∏–Ω—Å–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å –∑–∞ –ø–æ-–¥—ä–ª–≥–∞ –ø–∞—É–∑–∞
            delay += random.uniform(2.0, 5.0)
        
        logger.info(f"üí§ Human delay: {delay:.1f}s")
        time.sleep(delay)

    def _simulate_human_browsing(self):
        """–°–∏–º—É–ª–∏—Ä–∞ —á–æ–≤–µ—à–∫–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —Å–ª—É—á–∞–π–Ω–∏ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –º–∏—à–∫–∞—Ç–∞, —Å–∫—Ä–æ–ª–∏—Ä–∞–Ω–µ –∏ —Ç.–Ω."""
        # –°–∏–º—É–ª–∏—Ä–∞–º–µ —Ä–∞–∑–º–∏—Å—ä–ª –≤—Ä–µ–º–µ
        think_time = random.uniform(0.5, 2.0)
        time.sleep(think_time)

    def login(self) -> bool:
        """–ü–æ–¥–æ–±—Ä–µ–Ω–æ –ª–æ–≥–≤–∞–Ω–µ —Å —á–æ–≤–µ—à–∫–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"""
        print(f"üîê Attempting intelligent login for user: {self.username}")
        
        try:
            # –ü—ä—Ä–≤–æ –∑–∞—Ä–µ–∂–¥–∞–º–µ –≥–ª–∞–≤–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            print("üìç Loading homepage...")
            self._human_delay(1.0, 2.0)
            
            home_response = self.session.get(f"{self.base_url}/")
            if home_response.status_code != 200:
                logger.error(f"Failed to load homepage: {home_response.status_code}")
                return False
                
            # –°–∏–º—É–ª–∏—Ä–∞–º–µ —Ä–∞–∑–≥–ª–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
            self._simulate_human_browsing()
            
            # –û—Ç–∏–≤–∞–º–µ –¥–æ login —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
            print("üìç Navigating to login page...")
            self._human_delay()
            
            login_url = f"{self.base_url}/index.php?p=login&lang=6"
            login_page = self.session.get(login_url)
            
            if login_page.status_code != 200:
                logger.error(f"Failed to load login page: {login_page.status_code}")
                return False
                
            # –ü–∞—Ä—Å–≤–∞–º–µ login —Ñ–æ—Ä–º–∞—Ç–∞
            soup = BeautifulSoup(login_page.content, 'html.parser')
            form = soup.find('form')
            
            if not form:
                logger.error("Login form not found")
                return False
                
            # –°–∏–º—É–ª–∏—Ä–∞–º–µ –ø–æ–ø—ä–ª–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            print("‚å®Ô∏è  Filling login form...")
            self._human_delay(2.0, 4.0)  # –í—Ä–µ–º–µ –∑–∞ –≤—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
            
            # –ü–æ–¥–≥–æ—Ç–≤—è–º–µ login –¥–∞–Ω–Ω–∏—Ç–µ
            login_data = {
                'nick': self.username,
                'password': self.password,
                'login': '–í–ª–∏–∑–∞–Ω–µ'
            }
            
            # –î–æ–±–∞–≤—è–º–µ —Å–∫—Ä–∏—Ç–∏ –ø–æ–ª–µ—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            for input_tag in form.find_all('input', {'type': 'hidden'}):
                name = input_tag.get('name')
                value = input_tag.get('value', '')
                if name:
                    login_data[name] = value
            
            # –ü—Ä–∞–≤–∏–º login –∑–∞—è–≤–∫–∞—Ç–∞
            print("üöÄ Submitting login...")
            self._human_delay(1.0, 2.0)
            
            login_response = self.session.post(
                f"{self.base_url}/index.php",
                data=login_data,
                allow_redirects=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å–º–µ –≤–ª–µ–∑–ª–∏ —É—Å–ø–µ—à–Ω–æ
            if 'manager' in login_response.url.lower() or '–º–µ–Ω–∏–¥–∂—ä—Ä' in login_response.text:
                print("‚úÖ Login successful!")
                self._human_delay()
                return True
            else:
                logger.error("Login failed - check credentials")
                return False
                
        except Exception as e:
            logger.error(f"Login error: {str(e)}")
            return False

    def calculate_player_rating(self, player_data: Dict, position: str = 'forward') -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ –∏–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –∏–≥—Ä–∞—á —Å–ø–æ—Ä–µ–¥ –ø–æ–∑–∏—Ü–∏—è—Ç–∞"""
        try:
            # –ò–∑–≤–ª–∏—á–∞–º–µ –∞—Ç—Ä–∏–±—É—Ç–∏—Ç–µ
            attributes = {}
            for key, value in player_data.items():
                if key.lower() in ['goa', 'def', 'att', 'sho', 'spe', 'str', 'pas']:
                    try:
                        # –ü–∞—Ä—Å–≤–∞–º–µ —á–∏—Å–ª–∞—Ç–∞ –æ—Ç —Ç–µ–∫—Å—Ç–∞
                        numbers = re.findall(r'\d+', str(value))
                        if numbers:
                            attributes[key.lower()] = int(numbers[0])
                    except:
                        continue
            
            if not attributes:
                return 0.0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–º–µ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –∞–∫–æ –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω–∞
            if position == 'forward' and any(keyword in str(player_data).lower() for keyword in ['–≤—Ä–∞—Ç–∞—Ä', 'goalkeeper', 'gk']):
                position = 'goalkeeper'
            elif position == 'forward' and any(keyword in str(player_data).lower() for keyword in ['–∑–∞—â–∏—Ç–Ω–∏–∫', 'defenseman', 'def']):
                position = 'defenseman'
            
            # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ —Ç–µ–∂–µ—Å—Ç–∏—Ç–µ –∑–∞ –ø–æ–∑–∏—Ü–∏—è—Ç–∞
            weights = self.position_weights.get(position, self.position_weights['forward'])
            
            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –ø—Ä–µ—Ç–µ–≥–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥
            total_rating = 0.0
            total_weight = 0.0
            
            for attr, weight in weights.items():
                if attr in attributes and weight > 0:
                    total_rating += attributes[attr] * weight
                    total_weight += weight
            
            if total_weight > 0:
                return round(total_rating / total_weight, 1)
            else:
                return 0.0
                
        except Exception as e:
            logger.error(f"Error calculating player rating: {str(e)}")
            return 0.0

    def analyze_market_opportunities(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–∏—è –ø–∞–∑–∞—Ä –∑–∞ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        opportunities = []
        
        for player in self.data['market_data']:
            try:
                # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –∏–≥—Ä–∞—á–∞
                rating = self.calculate_player_rating(player)
                
                # –ü–∞—Ä—Å–≤–∞–º–µ —Ü–µ–Ω–∞—Ç–∞
                price_text = player.get('–º–∏–Ω. —Ü–µ–Ω–∞', '0')
                price = 0
                
                price_numbers = re.findall(r'[\d\s]+', price_text.replace(',', '').replace(' ', ''))
                if price_numbers:
                    try:
                        price = int(''.join(price_numbers[0].split()))
                    except:
                        price = 0
                
                # –ü–∞—Ä—Å–≤–∞–º–µ –≤—ä–∑—Ä–∞—Å—Ç—Ç–∞
                age = 30  # default
                age_text = player.get('–≤—ä–∑—Ä–∞—Å—Ç', '30')
                age_match = re.search(r'\d+', str(age_text))
                if age_match:
                    age = int(age_match.group())
                
                # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ value for money
                if price > 0 and rating > 0:
                    value_ratio = rating / (price / 1000000)  # rating per million
                    age_factor = max(0.5, (35 - age) / 10)  # younger is better
                    
                    opportunity_score = value_ratio * age_factor
                    
                    if opportunity_score > 5:  # –î–æ–±—Ä–∞ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç
                        opportunities.append({
                            'player': player.get('–∏–º–µ', 'Unknown'),
                            'rating': rating,
                            'price': price,
                            'age': age,
                            'value_ratio': round(value_ratio, 2),
                            'opportunity_score': round(opportunity_score, 2),
                            'recommendation': self._get_transfer_recommendation(rating, price, age)
                        })
                        
            except Exception as e:
                logger.error(f"Error analyzing market player: {str(e)}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ opportunity score
        opportunities.sort(key=lambda x: x['opportunity_score'], reverse=True)
        return opportunities[:10]  # –¢–æ–ø 10

    def _get_transfer_recommendation(self, rating: float, price: int, age: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞ –∑–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä"""
        if age < 22 and rating > 50:
            return "üåü –ú–ª–∞–¥ —Ç–∞–ª–∞–Ω—Ç —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª - –°–ò–õ–ù–û –ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–æ!"
        elif rating > 70 and price < 10000000:
            return "üí∞ –û—Ç–ª–∏—á–Ω–æ —Å—ä–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ"
        elif age > 32 and price > 20000000:
            return "‚ö†Ô∏è –í–∏—Å–æ–∫–∞ —Ü–µ–Ω–∞ –∑–∞ –≤—ä–∑—Ä–∞—Å—Ç–µ–Ω –∏–≥—Ä–∞—á - –≤–Ω–∏–º–∞–Ω–∏–µ!"
        elif rating > 60:
            return "‚úÖ –î–æ–±—Ä–æ –ø–æ–ø—ä–ª–Ω–µ–Ω–∏–µ –∑–∞ –æ—Ç–±–æ—Ä–∞"
        else:
            return "‚ùå –ù–µ —Å–µ –ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞"

    def analyze_team_strengths_weaknesses(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ —Å–∏–ª–Ω–∏—Ç–µ –∏ —Å–ª–∞–±–∏—Ç–µ –º–µ—Å—Ç–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∞"""
        analysis = {
            'strengths': [],
            'weaknesses': [],
            'position_analysis': {},
            'age_analysis': {},
            'overall_rating': 0.0
        }
        
        if not self.data['players']:
            return analysis
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        position_stats = {}
        total_rating = 0.0
        ages = []
        
        for player in self.data['players']:
            # –û–ø—Ä–µ–¥–µ–ª—è–º–µ –ø–æ–∑–∏—Ü–∏—è—Ç–∞
            position = 'forward'  # default
            player_text = str(player).lower()
            
            if any(keyword in player_text for keyword in ['–≤—Ä–∞—Ç–∞—Ä', 'goalkeeper']):
                position = 'goalkeeper'
            elif any(keyword in player_text for keyword in ['–∑–∞—â–∏—Ç–Ω–∏–∫', 'defenseman']):
                position = 'defenseman'
            
            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
            rating = self.calculate_player_rating(player, position)
            total_rating += rating
            
            if position not in position_stats:
                position_stats[position] = {'count': 0, 'total_rating': 0.0, 'players': []}
            
            position_stats[position]['count'] += 1
            position_stats[position]['total_rating'] += rating
            position_stats[position]['players'].append({
                'name': player.get('–∏–º–µ', 'Unknown'),
                'rating': rating
            })
            
            # –í—ä–∑—Ä–∞—Å—Ç
            age_text = player.get('–≤—ä–∑—Ä–∞—Å—Ç', '30')
            age_match = re.search(r'\d+', str(age_text))
            if age_match:
                ages.append(int(age_match.group()))
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Å—Ä–µ–¥–Ω–∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        for position, stats in position_stats.items():
            if stats['count'] > 0:
                avg_rating = stats['total_rating'] / stats['count']
                analysis['position_analysis'][position] = {
                    'average_rating': round(avg_rating, 1),
                    'player_count': stats['count'],
                    'top_player': max(stats['players'], key=lambda x: x['rating']) if stats['players'] else None
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–º–µ —Å–∏–ª–Ω–∏/—Å–ª–∞–±–∏ –º–µ—Å—Ç–∞
                if avg_rating > 65:
                    analysis['strengths'].append(f"–°–∏–ª–Ω–∞ {position} –ø–æ–∑–∏—Ü–∏—è (—Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f})")
                elif avg_rating < 45:
                    analysis['weaknesses'].append(f"–°–ª–∞–±–∞ {position} –ø–æ–∑–∏—Ü–∏—è (—Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f})")
        
        # –í—ä–∑—Ä–∞—Å—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑
        if ages:
            avg_age = sum(ages) / len(ages)
            analysis['age_analysis'] = {
                'average_age': round(avg_age, 1),
                'youngest': min(ages),
                'oldest': max(ages)
            }
            
            if avg_age > 30:
                analysis['weaknesses'].append(f"–°—Ç–∞—Ä –æ—Ç–±–æ—Ä (—Å—Ä–µ–¥–Ω–∞ –≤—ä–∑—Ä–∞—Å—Ç: {avg_age:.1f})")
            elif avg_age < 25:
                analysis['strengths'].append(f"–ú–ª–∞–¥ –æ—Ç–±–æ—Ä —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª (—Å—Ä–µ–¥–Ω–∞ –≤—ä–∑—Ä–∞—Å—Ç: {avg_age:.1f})")
        
        # –û–±—â —Ä–µ–π—Ç–∏–Ω–≥
        if len(self.data['players']) > 0:
            analysis['overall_rating'] = round(total_rating / len(self.data['players']), 1)
        
        return analysis

    def generate_training_plan(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ –∏–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω –ø–ª–∞–Ω –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        team_analysis = self.analyze_team_strengths_weaknesses()
        plan = {
            'priorities': [],
            'weekly_schedule': {},
            'focus_areas': [],
            'long_term_goals': []
        }
        
        # –ë–∞–∑–∏—Ä–∞–º–µ —Å–µ –Ω–∞ —Å–ª–∞–±–∏—Ç–µ –º–µ—Å—Ç–∞
        for weakness in team_analysis['weaknesses']:
            if '–∑–∞—â–∏—Ç–Ω–∏–∫' in weakness.lower() or 'defenseman' in weakness.lower():
                plan['priorities'].append("üõ°Ô∏è –ü–æ–¥–æ–±—Ä—è–≤–∞–Ω–µ –Ω–∞ –∑–∞—â–∏—Ç–∞—Ç–∞")
                plan['focus_areas'].append("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ DEF –∏ STR")
            elif '–Ω–∞–ø–∞–¥–∞—Ç–µ–ª' in weakness.lower() or 'forward' in weakness.lower():
                plan['priorities'].append("‚öΩ –ü–æ–¥–æ–±—Ä—è–≤–∞–Ω–µ –Ω–∞ –∞—Ç–∞–∫–∞—Ç–∞")
                plan['focus_areas'].append("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ ATT –∏ SHO")
            elif '–≤—Ä–∞—Ç–∞—Ä' in weakness.lower() or 'goalkeeper' in weakness.lower():
                plan['priorities'].append("ü•Ö –ü–æ–¥–æ–±—Ä—è–≤–∞–Ω–µ –Ω–∞ –≤—Ä–∞—Ç–∞—Ä—Å–∫–∞—Ç–∞ –∏–≥—Ä–∞")
                plan['focus_areas'].append("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ GOA")
        
        # –í—ä–∑—Ä–∞—Å—Ç–æ–≤–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
        if team_analysis['age_analysis'].get('average_age', 25) > 29:
            plan['long_term_goals'].append("üîÑ –ü–æ–¥–º—è–Ω–∞ –Ω–∞ —Å—Ç–∞—Ä–∏ –∏–≥—Ä–∞—á–∏ —Å –º–ª–∞–¥–∏ —Ç–∞–ª–∞–Ω—Ç–∏")
            plan['priorities'].append("üí™ –ü–æ–¥–¥—ä—Ä–∂–∞–Ω–µ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—Ç–∞ —Ñ–æ—Ä–º–∞")
        
        # –°–µ–¥–º–∏—á–µ–Ω –≥—Ä–∞—Ñ–∏–∫
        plan['weekly_schedule'] = {
            '–ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫': '–ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (SPE)',
            '–í—Ç–æ—Ä–Ω–∏–∫': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (PAS)',
            '–°—Ä—è–¥–∞': '–ü–æ—á–∏–≤–∫–∞',
            '–ß–µ—Ç–≤—ä—Ä—Ç—ä–∫': '–°–∏–ª–æ–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (STR)',
            '–ü–µ—Ç—ä–∫': '–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
            '–°—ä–±–æ—Ç–∞': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞ –º–∞—á',
            '–ù–µ–¥–µ–ª—è': '–ú–∞—á –∏–ª–∏ –ø–æ—á–∏–≤–∫–∞'
        }
        
        return plan

    def scrape_page_intelligently(self, page_name: str, page_url: str) -> bool:
        """–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–æ —Å–∫—Ä–µ–π–ø–≤–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∞–Ω–∞–ª–∏–∑"""
        print(f"üß† Intelligently analyzing: {page_name}")
        
        try:
            # –ß–æ–≤–µ—à–∫–∏ delay –ø—Ä–µ–¥–∏ –∑–∞—è–≤–∫–∞—Ç–∞
            self._human_delay()
            
            # –ü—Ä–∞–≤–∏–º –∑–∞—è–≤–∫–∞—Ç–∞
            url = f"{self.base_url}/{page_url}"
            response = self.session.get(url)
            
            if response.status_code != 200:
                logger.error(f"Failed to load {page_name}: {response.status_code}")
                return False
            
            # –ó–∞–ø–∞–∑–≤–∞–º–µ HTML –∑–∞ debug
            with open(f"{page_name}_page.html", 'w', encoding='utf-8') as f:
                f.write(response.text)
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω –∞–Ω–∞–ª–∏–∑ —Å–ø–æ—Ä–µ–¥ —Ç–∏–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            success = False
            
            if page_name == 'players':
                success = self._analyze_players_intelligently(soup)
            elif page_name == 'market':
                success = self._analyze_market_intelligently(soup)
            elif page_name == 'youth_school':
                success = self._analyze_youth_intelligently(soup)
            elif page_name == 'finances':
                success = self._analyze_finances_intelligently(soup)
            elif page_name == 'tactics':
                success = self._analyze_tactics_intelligently(soup)
            else:
                success = self._generic_page_analysis(soup, page_name)
            
            if success:
                print(f"     ‚úÖ {page_name} analyzed successfully")
            else:
                print(f"     ‚ö†Ô∏è {page_name} analysis incomplete")
            
            return success
            
        except Exception as e:
            logger.error(f"Error scraping {page_name}: {str(e)}")
            return False

    def _analyze_players_intelligently(self, soup: BeautifulSoup) -> bool:
        """–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ"""
        players_found = 0
        
        # –¢—ä—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü–∏ —Å –∏–≥—Ä–∞—á–∏
        tables = soup.find_all('table')
        
        for table_idx, table in enumerate(tables):
            rows = table.find_all('tr')
            
            if len(rows) < 2:
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ö–µ–¥—ä—Ä–∏—Ç–µ
            header_row = rows[0]
            headers = [th.get_text().strip().lower() for th in header_row.find_all(['th', 'td'])]
            
            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ç–æ–≤–∞ –µ —Ç–∞–±–ª–∏—Ü–∞ —Å –∏–≥—Ä–∞—á–∏
            player_indicators = ['–∏–º–µ', 'name', '–≤–æ–∑—Ä–∞—Å—Ç', 'age', 'goa', 'def', 'att', 'sho', 'spe', 'str', 'pas']
            
            if not any(indicator in ' '.join(headers) for indicator in player_indicators):
                continue
            
            # –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –∏–≥—Ä–∞—á–∏—Ç–µ
            for row_idx, row in enumerate(rows[1:], 1):
                cells = row.find_all(['td', 'th'])
                
                if len(cells) < 3:
                    continue
                
                player_data = {
                    'source': 'players_analysis',
                    'table': table_idx + 1,
                    'row': row_idx,
                    'analyzed_at': datetime.now().isoformat()
                }
                
                # –ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
                for col_idx, cell in enumerate(cells):
                    if col_idx < len(headers):
                        cell_text = cell.get_text().strip()
                        if cell_text and cell_text not in ['-', '']:
                            player_data[headers[col_idx]] = cell_text
                
                # –î–æ–±–∞–≤—è–º–µ –∏–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω –∞–Ω–∞–ª–∏–∑
                if len(player_data) >= 5:
                    # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
                    player_data['ai_rating'] = self.calculate_player_rating(player_data)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–º–µ –ø–æ–∑–∏—Ü–∏—è—Ç–∞
                    player_data['suggested_position'] = self._determine_best_position(player_data)
                    
                    # –í—ä–∑—Ä–∞—Å—Ç–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    age = self._extract_age(player_data)
                    if age:
                        player_data['age_category'] = self._categorize_age(age)
                    
                    self.data['players'].append(player_data)
                    players_found += 1
        
        print(f"     üßÆ AI Analysis: {players_found} players, avg rating calculated")
        return players_found > 0

    def _analyze_market_intelligently(self, soup: BeautifulSoup) -> bool:
        """–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–∏—è –ø–∞–∑–∞—Ä"""
        market_players = []
        
        tables = soup.find_all('table')
        
        for table in tables:
            rows = table.find_all('tr')
            
            if len(rows) < 2:
                continue
                
            headers = [th.get_text().strip().lower() for th in rows[0].find_all(['th', 'td'])]
            
            # –¢—ä—Ä—Å–∏–º –º–∞—Ä–∫–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
            market_indicators = ['—Ü–µ–Ω–∞', 'price', '–æ—Ñ–µ—Ä—Ç–∞', 'bid', '—Å—Ä–æ–∫', 'deadline']
            
            if not any(indicator in ' '.join(headers) for indicator in market_indicators):
                continue
            
            for row in rows[1:]:
                cells = row.find_all(['td', 'th'])
                
                if len(cells) < 2:
                    continue
                
                market_data = {}
                
                for col_idx, cell in enumerate(cells):
                    if col_idx < len(headers):
                        cell_text = cell.get_text().strip()
                        if cell_text and cell_text not in ['-', '']:
                            market_data[headers[col_idx]] = cell_text
                
                if len(market_data) >= 2:
                    # –î–æ–±–∞–≤—è–º–µ AI –∞–Ω–∞–ª–∏–∑
                    market_data['ai_analysis'] = self._analyze_market_player(market_data)
                    market_players.append(market_data)
        
        self.data['market_data'] = market_players
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ transfer opportunities
        self.data['transfer_targets'] = self.analyze_market_opportunities()
        
        print(f"     üìä Market Analysis: {len(market_players)} players, {len(self.data['transfer_targets'])} opportunities found")
        return len(market_players) > 0

    def _analyze_market_player(self, player_data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –æ—Ç–¥–µ–ª–µ–Ω –∏–≥—Ä–∞—á –æ—Ç –ø–∞–∑–∞—Ä–∞"""
        analysis = {
            'value_assessment': 'unknown',
            'risk_level': 'medium',
            'recommendation': 'evaluate'
        }
        
        # –¢—É–∫ –º–æ–∂–µ–º –¥–∞ –¥–æ–±–∞–≤–∏–º –ø–æ-—Å–ª–æ–∂–µ–Ω –∞–Ω–∞–ª–∏–∑
        # –∑–∞—Å–µ–≥–∞ –≤—Ä—ä—â–∞–º–µ –æ—Å–Ω–æ–≤–µ–Ω –∞–Ω–∞–ª–∏–∑
        
        return analysis

    def _determine_best_position(self, player_data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è –Ω–∞–π-–¥–æ–±—Ä–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –∑–∞ –∏–≥—Ä–∞—á"""
        ratings = {}
        
        for position, weights in self.position_weights.items():
            ratings[position] = self.calculate_player_rating(player_data, position)
        
        best_position = max(ratings, key=ratings.get)
        return best_position

    def _extract_age(self, player_data: Dict) -> Optional[int]:
        """–ò–∑–≤–ª–∏—á–∞ –≤—ä–∑—Ä–∞—Å—Ç—Ç–∞ –æ—Ç –¥–∞–Ω–Ω–∏—Ç–µ –Ω–∞ –∏–≥—Ä–∞—á–∞"""
        for key, value in player_data.items():
            if '–≤—ä–∑—Ä–∞—Å—Ç' in key.lower() or 'age' in key.lower():
                age_match = re.search(r'\d+', str(value))
                if age_match:
                    return int(age_match.group())
        return None

    def _categorize_age(self, age: int) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–∞ –≤—ä–∑—Ä–∞—Å—Ç—Ç–∞"""
        if age < 20:
            return 'junior'
        elif age < 25:
            return 'young'
        elif age < 30:
            return 'prime'
        elif age < 35:
            return 'veteran'
        else:
            return 'senior'

    def _analyze_youth_intelligently(self, soup: BeautifulSoup) -> bool:
        """–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ –º–ª–∞–¥–µ–∂–∫–∞—Ç–∞ —à–∫–æ–ª–∞"""
        youth_players = []
        
        # –ü–æ–¥–æ–±–µ–Ω –ø–æ–¥—Ö–æ–¥ –∫–∞—Ç–æ –ø—Ä–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –∏–≥—Ä–∞—á–∏
        tables = soup.find_all('table')
        
        for table in tables:
            rows = table.find_all('tr')
            
            if len(rows) < 2:
                continue
                
            headers = [th.get_text().strip().lower() for th in rows[0].find_all(['th', 'td'])]
            
            # –ú–ª–∞–¥–µ–∂–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
            youth_indicators = ['—Ç–∞–ª–∞–Ω—Ç', 'talent', '–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª', 'potential', '–∫–∞—á–µ—Å—Ç–≤–æ', 'quality']
            
            if any(indicator in ' '.join(headers) for indicator in youth_indicators):
                for row in rows[1:]:
                    cells = row.find_all(['td', 'th'])
                    
                    if len(cells) >= 3:
                        youth_data = {}
                        
                        for col_idx, cell in enumerate(cells):
                            if col_idx < len(headers):
                                cell_text = cell.get_text().strip()
                                if cell_text and cell_text not in ['-', '']:
                                    youth_data[headers[col_idx]] = cell_text
                        
                        if len(youth_data) >= 3:
                            # AI –∞–Ω–∞–ª–∏–∑ –∑–∞ –º–ª–∞–¥–µ–∂–∏
                            youth_data['potential_rating'] = self._calculate_youth_potential(youth_data)
                            youth_data['development_time'] = self._estimate_development_time(youth_data)
                            youth_players.append(youth_data)
        
        self.data['youth_players'] = youth_players
        self.data['youth_school']['players'] = youth_players
        self.data['youth_school']['count'] = len(youth_players)
        
        print(f"     üå± Youth Analysis: {len(youth_players)} prospects analyzed")
        return len(youth_players) > 0

    def _calculate_youth_potential(self, youth_data: Dict) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –Ω–∞ –º–ª–∞–¥ –∏–≥—Ä–∞—á"""
        # –¢—ä—Ä—Å–∏–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤ –¥–∞–Ω–Ω–∏—Ç–µ
        quality = 50  # default
        potential = 50  # default
        
        for key, value in youth_data.items():
            if '–∫–∞—á–µ—Å—Ç–≤–æ' in key.lower() or 'quality' in key.lower():
                numbers = re.findall(r'\d+', str(value))
                if numbers:
                    quality = int(numbers[0])
            elif '–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª' in key.lower() or 'potential' in key.lower():
                numbers = re.findall(r'\d+', str(value))
                if numbers:
                    potential = int(numbers[0])
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–∞–Ω —Å–∫–æ—Ä
        return round((quality * 0.4 + potential * 0.6), 1)

    def _estimate_development_time(self, youth_data: Dict) -> str:
        """–û—Ü–µ–Ω—è–≤–∞ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ"""
        age = self._extract_age(youth_data)
        
        if age and age < 18:
            return "2-3 years"
        elif age and age < 20:
            return "1-2 years"
        else:
            return "6 months - 1 year"

    def _analyze_finances_intelligently(self, soup: BeautifulSoup) -> bool:
        """–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∞–Ω–∞–ª–∏–∑"""
        finances = {}
        
        # –¢—ä—Ä—Å–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∏ –¥–∞–Ω–Ω–∏
        text = soup.get_text()
        
        # –†–∞–∑–ª–∏—á–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏ –∑–∞ –ø–∞—Ä–∏
        money_patterns = [
            (r'(\d{1,3}(?:[\s,]\d{3})*)\s*(?:–ª–≤|–ª–µ–≤–∞|BGN)', 'BGN'),
            (r'(\d{1,3}(?:[\s,]\d{3})*)\s*(?:\$|USD|–¥–æ–ª–∞—Ä–∞)', 'USD'),
            (r'(\d{1,3}(?:[\s,]\d{3})*)\s*(?:‚Ç¨|EUR|–µ–≤—Ä–æ)', 'EUR'),
            (r'(\d+)\s*(?:–º–∏–ª–∏–æ–Ω–∞?|million)', 'millions')
        ]
        
        for pattern, currency in money_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                finances[f'amounts_{currency}'] = matches[:5]  # –ü—ä—Ä–≤–∏—Ç–µ 5
        
        # –¢—ä—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü–∏ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∏ –¥–∞–Ω–Ω–∏
        tables = soup.find_all('table')
        financial_data = []
        
        for table in tables:
            rows = table.find_all('tr')
            for row in rows:
                cells = row.find_all(['td', 'th'])
                if len(cells) == 2:
                    key = cells[0].get_text().strip()
                    value = cells[1].get_text().strip()
                    
                    if any(keyword in key.lower() for keyword in ['–ø—Ä–∏—Ö–æ–¥', '—Ä–∞–∑—Ö–æ–¥', '–±–∞–ª–∞–Ω—Å', '–±—é–¥–∂–µ—Ç', 'income', 'expense']):
                        financial_data.append({'item': key, 'value': value})
        
        finances['financial_items'] = financial_data
        
        # AI —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∞–Ω–∞–ª–∏–∑
        finances['ai_analysis'] = self._analyze_financial_health(finances)
        
        self.data['finances'] = finances
        
        print(f"     üí∞ Financial Analysis: {len(financial_data)} items, health assessed")
        return len(finances) > 0

    def _analyze_financial_health(self, finances: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ—Ç–æ –∑–¥—Ä–∞–≤–µ"""
        analysis = {
            'health_status': 'unknown',
            'recommendations': [],
            'risk_factors': []
        }
        
        # –¢—É–∫ –º–æ–∂–µ –¥–∞ –¥–æ–±–∞–≤–∏–º –ø–æ-—Å–ª–æ–∂–µ–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∞–Ω–∞–ª–∏–∑
        # –∑–∞—Å–µ–≥–∞ –≤—Ä—ä—â–∞–º–µ –æ—Å–Ω–æ–≤–µ–Ω –∞–Ω–∞–ª–∏–∑
        
        analysis['recommendations'].append("–°–ª–µ–¥–µ—Ç–µ —Ä–µ–¥–æ–≤–Ω–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∏—Ç–µ –æ—Ç—á–µ—Ç–∏")
        return analysis

    def _analyze_tactics_intelligently(self, soup: BeautifulSoup) -> bool:
        """–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑"""
        tactics = {}
        
        # –¢—ä—Ä—Å–∏–º —Ñ–æ—Ä–º–∏ –∏ select –ø–æ–ª–µ—Ç–∞
        form_elements = soup.find_all(['input', 'select', 'option'])
        
        for element in form_elements:
            name = element.get('name', '')
            
            if any(keyword in name.lower() for keyword in ['tactic', 'formation', 'strategy', '—Ç–∞–∫—Ç–∏–∫–∞']):
                if element.name == 'select':
                    selected = element.find('option', {'selected': True})
                    if selected:
                        tactics[name] = selected.get_text().strip()
                elif element.name == 'input':
                    value = element.get('value', '')
                    if value:
                        tactics[name] = value
        
        # AI —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑
        tactics['ai_suggestions'] = self._generate_tactical_suggestions()
        
        self.data['tactics'] = tactics
        
        print(f"     ‚ö° Tactical Analysis: {len(tactics)} settings, AI suggestions generated")
        return len(tactics) > 0

    def _generate_tactical_suggestions(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        suggestions = []
        
        team_analysis = self.analyze_team_strengths_weaknesses()
        
        # –ë–∞–∑–∏—Ä–∞–º–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ç–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∞
        if '–°–∏–ª–Ω–∞ defenseman –ø–æ–∑–∏—Ü–∏—è' in ' '.join(team_analysis['strengths']):
            suggestions.append("üõ°Ô∏è –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª–Ω–∞ —Ç–∞–∫—Ç–∏–∫–∞")
        
        if '–°–∏–ª–Ω–∞ forward –ø–æ–∑–∏—Ü–∏—è' in ' '.join(team_analysis['strengths']):
            suggestions.append("‚öîÔ∏è –ò–≥—Ä–∞–π—Ç–µ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ –≤ –∞—Ç–∞–∫–∞")
        
        if team_analysis['age_analysis'].get('average_age', 25) > 30:
            suggestions.append("üîÑ –†–æ—Ç–∏—Ä–∞–π—Ç–µ —Å—ä—Å—Ç–∞–≤–∞ –ø–æ-—á–µ—Å—Ç–æ")
        
        suggestions.append("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø—Ä–µ–¥–∏ –≤—Å–µ–∫–∏ –º–∞—á")
        
        return suggestions

    def _generic_page_analysis(self, soup: BeautifulSoup, page_name: str) -> bool:
        """–û–±—â –∞–Ω–∞–ª–∏–∑ –∑–∞ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∏"""
        data = {
            'tables': len(soup.find_all('table')),
            'forms': len(soup.find_all('form')),
            'inputs': len(soup.find_all('input')),
            'analyzed_at': datetime.now().isoformat()
        }
        
        # –ò–∑–≤–ª–∏—á–∞–º–µ —á–∏—Å–ª–∞ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
        text = soup.get_text()
        numbers = re.findall(r'\d+', text)
        
        if numbers:
            data['numbers_found'] = len(numbers)
            data['sample_numbers'] = numbers[:10]  # –ü—ä—Ä–≤–∏—Ç–µ 10
        
        self.data[page_name] = data
        
        print(f"     üìã Generic Analysis: {data['tables']} tables, {data['forms']} forms")
        return True

    def perform_comprehensive_ai_analysis(self):
        """–ò–∑–≤—ä—Ä—à–≤–∞ –ø—ä–ª–µ–Ω AI –∞–Ω–∞–ª–∏–∑ –Ω–∞ –≤—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏"""
        print("\nüß† Performing comprehensive AI analysis...")
        
        ai_analysis = {
            'timestamp': datetime.now().isoformat(),
            'team_analysis': self.analyze_team_strengths_weaknesses(),
            'transfer_opportunities': self.analyze_market_opportunities(),
            'training_plan': self.generate_training_plan(),
            'financial_health': self.data.get('finances', {}).get('ai_analysis', {}),
            'tactical_suggestions': self.data.get('tactics', {}).get('ai_suggestions', []),
            'overall_recommendations': []
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –æ–±—â–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
        recommendations = []
        
        team_analysis = ai_analysis['team_analysis']
        
        # –ü—Ä–µ–ø–æ—Ä—ä–∫–∏ –∑–∞ –∏–≥—Ä–∞—á–∏
        if team_analysis['overall_rating'] < 50:
            recommendations.append("üîÑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ü–æ–¥–æ–±—Ä—è–≤–∞–Ω–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ—Ç–æ –Ω–∞ –æ—Ç–±–æ—Ä–∞")
        
        if len(team_analysis['weaknesses']) > len(team_analysis['strengths']):
            recommendations.append("‚ö†Ô∏è –§–æ–∫—É—Å –≤—ä—Ä—Ö—É —Å–ª–∞–±–∏—Ç–µ –º–µ—Å—Ç–∞ –≤ –æ—Ç–±–æ—Ä–∞")
        
        # –ü—Ä–µ–ø–æ—Ä—ä–∫–∏ –∑–∞ –≤—ä–∑—Ä–∞—Å—Ç
        avg_age = team_analysis.get('age_analysis', {}).get('average_age', 25)
        if avg_age > 29:
            recommendations.append("üë• –ò–Ω–≤–µ—Å—Ç–∏—Ä–∞–π—Ç–µ –≤ –º–ª–∞–¥–∏ –∏–≥—Ä–∞—á–∏")
        elif avg_age < 23:
            recommendations.append("üéì –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –º–ª–∞–¥–∏—Ç–µ —Ç–∞–ª–∞–Ω—Ç–∏")
        
        # –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
        if len(ai_analysis['transfer_opportunities']) > 0:
            top_opportunity = ai_analysis['transfer_opportunities'][0]
            recommendations.append(f"üí∞ –†–∞–∑–≥–ª–µ–¥–∞–π—Ç–µ {top_opportunity['player']} (score: {top_opportunity['opportunity_score']})")
        
        ai_analysis['overall_recommendations'] = recommendations
        
        self.data['ai_analysis'] = ai_analysis
        
        print(f"     ‚úÖ AI Analysis complete: {len(recommendations)} recommendations generated")

    def save_intelligent_results(self) -> Tuple[str, str, List[str]]:
        """–ó–∞–ø–∞–∑–≤–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ —Å AI –∞–Ω–∞–ª–∏–∑"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # JSON —Ñ–∞–π–ª —Å –ø—ä–ª–Ω–∏ –¥–∞–Ω–Ω–∏
        json_file = f"hockey_arena_intelligent_{timestamp}.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)
        
        # –ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω –æ—Ç—á–µ—Ç
        report_file = f"hockey_arena_ai_report_{timestamp}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("üèí HOCKEY ARENA AI ANALYSIS REPORT\n")
            f.write("=" * 60 + "\n")
            f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"User: {self.username}\n\n")
            
            # AI –∞–Ω–∞–ª–∏–∑
            if 'ai_analysis' in self.data:
                ai = self.data['ai_analysis']
                
                f.write("üß† AI TEAM ANALYSIS:\n")
                team_analysis = ai.get('team_analysis', {})
                f.write(f"  ‚Ä¢ Overall Rating: {team_analysis.get('overall_rating', 0)}/100\n")
                f.write(f"  ‚Ä¢ Average Age: {team_analysis.get('age_analysis', {}).get('average_age', 'N/A')}\n")
                
                f.write("\nüí™ STRENGTHS:\n")
                for strength in team_analysis.get('strengths', []):
                    f.write(f"  ‚Ä¢ {strength}\n")
                
                f.write("\n‚ö†Ô∏è WEAKNESSES:\n")
                for weakness in team_analysis.get('weaknesses', []):
                    f.write(f"  ‚Ä¢ {weakness}\n")
                
                f.write("\nüéØ TRANSFER OPPORTUNITIES:\n")
                for i, opp in enumerate(ai.get('transfer_opportunities', [])[:5], 1):
                    f.write(f"  {i}. {opp['player']} - Score: {opp['opportunity_score']} ({opp['recommendation']})\n")
                
                f.write("\nüèÉ TRAINING PLAN:\n")
                training_plan = ai.get('training_plan', {})
                for priority in training_plan.get('priorities', []):
                    f.write(f"  ‚Ä¢ {priority}\n")
                
                f.write("\n‚ö° TACTICAL SUGGESTIONS:\n")
                for suggestion in ai.get('tactical_suggestions', []):
                    f.write(f"  ‚Ä¢ {suggestion}\n")
                
                f.write("\nüéØ OVERALL RECOMMENDATIONS:\n")
                for rec in ai.get('overall_recommendations', []):
                    f.write(f"  ‚Ä¢ {rec}\n")
        
        # CSV —Ñ–∞–π–ª–æ–≤–µ
        csv_files = []
        
        # –ò–≥—Ä–∞—á–∏ —Å AI –∞–Ω–∞–ª–∏–∑
        if self.data['players']:
            players_csv = f"players_ai_analysis_{timestamp}.csv"
            
            fieldnames = set()
            for player in self.data['players']:
                fieldnames.update(player.keys())
            
            with open(players_csv, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=sorted(fieldnames))
                writer.writeheader()
                writer.writerows(self.data['players'])
            csv_files.append(players_csv)
        
        # –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–∏ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if self.data.get('transfer_opportunities'):
            transfer_csv = f"transfer_opportunities_{timestamp}.csv"
            
            with open(transfer_csv, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=['player', 'rating', 'price', 'age', 'value_ratio', 'opportunity_score', 'recommendation'])
                writer.writeheader()
                writer.writerows(self.data['transfer_opportunities'])
            csv_files.append(transfer_csv)
        
        print(f"\nüíæ Intelligent Results saved:")
        print(f"   üìÑ {json_file} (complete AI analysis)")
        print(f"   üìÑ {report_file} (AI report)")
        for csv_file in csv_files:
            print(f"   üìÑ {csv_file} (structured data)")
        
        return json_file, report_file, csv_files

    def run_intelligent_analysis(self) -> bool:
        """–°—Ç–∞—Ä—Ç–∏—Ä–∞ –∏–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–∏—è –∞–Ω–∞–ª–∏–∑"""
        print("üöÄ Starting INTELLIGENT Hockey Arena Analysis...")
        print("üß† AI-Powered with human-like behavior")
        print("=" * 60)
        
        # –õ–æ–≥–≤–∞–Ω–µ
        if not self.login():
            print("‚ùå Login failed - stopping analysis")
            return False
        
        print("‚úÖ Login successful! Starting intelligent scraping...")
        
        # –û–±—â –±—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–∏
        total_pages = sum(len(pages) for pages in self.analysis_pages.values())
        current_page = 0
        
        # –°–∫—Ä–µ–π–ø–≤–∞–º–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        for priority, pages in self.analysis_pages.items():
            print(f"\nüìä Analyzing {priority} pages...")
            
            for page_name, page_url in pages.items():
                current_page += 1
                print(f"üîç [{current_page}/{total_pages}] {page_name}")
                
                success = self.scrape_page_intelligently(page_name, page_url)
                
                if not success and priority == 'critical':
                    print(f"‚ö†Ô∏è Critical page {page_name} failed - continuing anyway")
                
                # Human-like delay between pages
                self._human_delay(2.0, 5.0)
        
        print(f"\nüß† Starting AI analysis of collected data...")
        
        # –ò–∑–≤—ä—Ä—à–≤–∞–º–µ AI –∞–Ω–∞–ª–∏–∑
        self.perform_comprehensive_ai_analysis()
        
        # –ó–∞–ø–∞–∑–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        json_file, report_file, csv_files = self.save_intelligent_results()
        
        # –§–∏–Ω–∞–ª–µ–Ω –¥–æ–∫–ª–∞–¥
        print(f"\nüéâ INTELLIGENT ANALYSIS COMPLETED!")
        print(f"üìà Results:")
        print(f"   ‚Ä¢ Players analyzed: {len(self.data['players'])}")
        print(f"   ‚Ä¢ Market opportunities: {len(self.data.get('transfer_opportunities', []))}")
        print(f"   ‚Ä¢ Youth prospects: {len(self.data.get('youth_players', []))}")
        
        if 'ai_analysis' in self.data:
            ai = self.data['ai_analysis']
            print(f"   ‚Ä¢ Team rating: {ai.get('team_analysis', {}).get('overall_rating', 0)}/100")
            print(f"   ‚Ä¢ AI recommendations: {len(ai.get('overall_recommendations', []))}")
        
        print(f"\nüéØ Next steps:")
        print(f"   1. Review the AI report: {report_file}")
        print(f"   2. Check transfer opportunities")
        print(f"   3. Implement training plan")
        print(f"   4. Apply tactical suggestions")
        
        return True

def main():
    print("üèí HOCKEY ARENA INTELLIGENT ANALYZER v2.0")
    print("üß† AI-Powered Analysis with Human-like Behavior")
    print("=" * 70)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - —Å–ª–æ–∂–µ—Ç–µ –≤–∞—à–∏—Ç–µ –¥–∞–Ω–Ω–∏ —Ç—É–∫
    username = "delirium"
    password = "Zweider4e"
    
    analyzer = IntelligentHockeyAnalyzer(username, password)
    
    try:
        success = analyzer.run_intelligent_analysis()
        
        if success:
            print("\n‚úÖ SUCCESS! Intelligent analysis completed.")
            print("üéØ Use the generated insights to dominate Hockey Arena!")
        else:
            print("\n‚ùå ANALYSIS FAILED!")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Analysis interrupted by user")
    except Exception as e:
        print(f"\nüí• Unexpected error: {str(e)}")
        logger.error(f"Main execution error: {str(e)}")

if __name__ == "__main__":
    main()