#!/usr/bin/env python3
"""
Fixed Hockey Arena Scraper - Handling JavaScript redirects
"""

import requests
from bs4 import BeautifulSoup
import json
import time
from datetime import datetime
import re
import csv

class FixedHockeyAnalyzer:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.base_url = "https://www.hockeyarena.net"
        
        self.data = {
            'team_info': {},
            'players': [],
            'matches': [],
            'standings': {},
            'finances': {},
            'tactics': {},
            'training': {},
            'youth_school': {},
            'stadium': {},
            'scouting': {},
            'market_data': [],
            'statistics': {},
            'calendar': [],
            'analysis': {}
        }
        
        # Headers
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept-Language': 'bg,en;q=0.9',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Cache-Control': 'no-cache'
        })
        
        # –°—Ç—Ä–∞–Ω–∏—Ü–∏ –∑–∞ scraping
        self.pages_to_scrape = {
            'summary': 'manager_summary.php',
            'players': 'manager_team_players.php',
            'team_statistics': 'manager_team_statistics.php',
            'standings': 'public_standings.inc',
            'finances': 'manager_finance_report.inc',
            'tactics': 'manager_tactics_form.php',
            'training': 'manager_training_form1.php',
            'training_schedules': 'manager_training_schedules_form.php',
            'lineup': 'manager_lines_lineup_form_new.php',
            'youth_school': 'manager_youth_school_form.php',
            'scouting': 'manager_scouting_form.php',
            'market': 'manager_player_market_form.php',
            'calendar': 'manager_calendar.php',
            'news': 'manager_news.php',
            'stars': 'manager_stars_form.php',
            'jersey': 'manager_jersey.inc',
            'bonuses': 'manager_league_bonuses.php'
        }
        
        print(f"üèí Fixed Hockey Arena Analyzer initialized")
        print(f"üë§ User: {username}")

    def login(self):
        """–ü–æ–ø—Ä–∞–≤–µ–Ω–æ –ª–æ–≥–≤–∞–Ω–µ —Å JavaScript redirect handling"""
        print("\nüîê Attempting login...")
        
        try:
            # –°—Ç—ä–ø–∫–∞ 1: –í–∑–µ–º–∞–º–µ login —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
            login_url = f"{self.base_url}/bg/login"
            print(f"üìÑ Accessing: {login_url}")
            
            response = self.session.get(login_url, timeout=15)
            if response.status_code != 200:
                print(f"‚ùå Cannot access login page: {response.status_code}")
                return False
            
            # –°—Ç—ä–ø–∫–∞ 2: –ü–æ–¥–≥–æ—Ç–≤—è–º–µ login –¥–∞–Ω–Ω–∏—Ç–µ (–≤–µ—á–µ –∑–Ω–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞)
            login_data = {
                'nick': self.username,
                'password': self.password,
                'submit': '–í–ª–µ–∑ –≤ –∏–≥—Ä–∞—Ç–∞'
            }
            
            print(f"üì§ Posting login data...")
            
            # –°—Ç—ä–ø–∫–∞ 3: –ò–∑–ø—Ä–∞—â–∞–º–µ login –∑–∞—è–≤–∫–∞—Ç–∞
            action_url = f"{self.base_url}/bg/index.php?p=security_log.php"
            login_response = self.session.post(action_url, data=login_data, allow_redirects=True)
            
            print(f"üì® Response: {login_response.status_code}")
            print(f"üîó Final URL: {login_response.url}")
            
            # –°—Ç—ä–ø–∫–∞ 4: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ JavaScript redirect
            response_text = login_response.text
            
            # –¢—ä—Ä—Å–∏–º JavaScript redirect
            js_redirect_match = re.search(r"window\.location\.href\s*=\s*['\"]([^'\"]+)['\"]", response_text)
            
            if js_redirect_match:
                redirect_url = js_redirect_match.group(1)
                print(f"üîÑ JavaScript redirect detected: {redirect_url}")
                
                # –°–ª–µ–¥–≤–∞–º–µ redirect-–∞
                if not redirect_url.startswith('http'):
                    redirect_url = f"{self.base_url}/bg/{redirect_url}"
                
                print(f"üîó Following redirect to: {redirect_url}")
                redirect_response = self.session.get(redirect_url, timeout=15)
                
                print(f"üì® Redirect response: {redirect_response.status_code}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å–º–µ –≤ manager –æ–±–ª–∞—Å—Ç—Ç–∞
                if redirect_response.status_code == 200:
                    content = redirect_response.text.lower()
                    
                    # –¢—ä—Ä—Å–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞ —É—Å–ø–µ—à–µ–Ω login
                    manager_indicators = [
                        'manager_', 'logout', '–æ—Ç–±–æ—Ä', '–∏–≥—Ä–∞—á–∏', '–º–∞—á–æ–≤–µ', 
                        '—Å—Ç–∞–¥–∏–æ–Ω', '—Ç–∞–∫—Ç–∏–∫–∏', 'team', 'players'
                    ]
                    
                    found_indicators = [ind for ind in manager_indicators if ind in content]
                    
                    if found_indicators:
                        print(f"‚úÖ Login successful! Found indicators: {found_indicators[:3]}")
                        
                        # –ó–∞–ø–∞–∑–≤–∞–º–µ —É—Å–ø–µ—à–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                        with open('successful_login_page.html', 'w', encoding='utf-8') as f:
                            f.write(redirect_response.text)
                        
                        return True
            
            # –ê–∫–æ –Ω—è–º–∞ JavaScript redirect, –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ response-a
            content = login_response.text.lower()
            if any(indicator in content for indicator in ['manager_', 'logout', '–æ—Ç–±–æ—Ä']):
                print("‚úÖ Login successful (direct)!")
                return True
            
            print("‚ùå Login failed - no manager area detected")
            
            # –ó–∞–ø–∞–∑–≤–∞–º–µ –∑–∞ debug
            with open('login_debug_response.html', 'w', encoding='utf-8') as f:
                f.write(login_response.text)
            
            return False
            
        except Exception as e:
            print(f"‚ùå Login error: {e}")
            return False

    def scrape_page(self, page_name, page_url):
        """Scraping –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        print(f"\nüìÑ Scraping {page_name}...")
        
        try:
            full_url = f"{self.base_url}/bg/index.php?p={page_url}"
            response = self.session.get(full_url, timeout=15)
            
            print(f"   Status: {response.status_code}")
            
            if response.status_code != 200:
                print(f"   ‚ùå Error: {response.status_code}")
                return False
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
            filename = f"{page_name}_page.html"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(response.text)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å–ø–æ—Ä–µ–¥ —Ç–∏–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            success = False
            
            if page_name == 'players':
                success = self.analyze_players_page(soup)
            elif page_name == 'team_statistics':
                success = self.analyze_statistics_page(soup)
            elif page_name == 'finances':
                success = self.analyze_finances_page(soup)
            elif page_name == 'tactics':
                success = self.analyze_tactics_page(soup)
            elif page_name == 'training':
                success = self.analyze_training_page(soup)
            elif page_name == 'youth_school':
                success = self.analyze_youth_school_page(soup)
            elif page_name == 'market':
                success = self.analyze_market_page(soup)
            elif page_name == 'news':
                success = self.analyze_news_page(soup)
            else:
                success = self.analyze_generic_page(soup, page_name)
            
            if success:
                print(f"   ‚úÖ {page_name} analyzed successfully")
            else:
                print(f"   üìÑ {page_name} processed")
            
            return True
                
        except Exception as e:
            print(f"   ‚ùå Error scraping {page_name}: {e}")
            return False

    def analyze_players_page(self, soup):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ —Å –∏–≥—Ä–∞—á–∏"""
        print("   üë• Analyzing players...")
        
        players_found = 0
        tables = soup.find_all('table')
        
        for table_idx, table in enumerate(tables):
            rows = table.find_all('tr')
            if len(rows) < 2:
                continue
            
            # –í–∑–µ–º–∞–º–µ header row
            headers = []
            header_row = rows[0]
            for th in header_row.find_all(['th', 'td']):
                header_text = th.get_text().strip().lower()
                headers.append(header_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ —Ç–∞–±–ª–∏—Ü–∞ —Å –∏–≥—Ä–∞—á–∏
            player_keywords = [
                '–∏–º–µ', 'name', '–≤—ä–∑—Ä–∞—Å—Ç', 'age', '–ø–æ–∑–∏—Ü–∏—è', 'position',
                '–≤—Ä–∞—Ç–∞—Ä', 'goalie', '–∑–∞—â–∏—Ç–∞', 'defense', '–∞—Ç–∞–∫–∞', 'attack'
            ]
            
            matching_keywords = sum(1 for header in headers for keyword in player_keywords if keyword in header)
            
            if matching_keywords >= 2:  # –ú–∏–Ω–∏–º—É–º 2 –ø–æ–¥—Ö–æ–¥—è—â–∏ –∫–æ–ª–æ–Ω–∏
                print(f"     üìä Player table found (table {table_idx+1}, {matching_keywords} matching columns)")
                
                # –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –∏–≥—Ä–∞—á–∏—Ç–µ
                for row_idx, row in enumerate(rows[1:], 1):
                    cells = row.find_all(['td', 'th'])
                    if len(cells) >= 3:
                        player_data = {
                            'source': 'players_page',
                            'table': table_idx + 1,
                            'row': row_idx
                        }
                        
                        for col_idx, cell in enumerate(cells):
                            if col_idx < len(headers):
                                cell_text = cell.get_text().strip()
                                if cell_text and cell_text not in ['-', '']:
                                    player_data[headers[col_idx]] = cell_text
                        
                        if len(player_data) >= 5:  # –ú–∏–Ω–∏–º—É–º 5 –ø–æ–ª–µ—Ç–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ meta)
                            self.data['players'].append(player_data)
                            players_found += 1
        
        print(f"     ‚úÖ Found {players_found} players")
        return players_found > 0

    def analyze_statistics_page(self, soup):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ"""
        print("   üìä Analyzing team statistics...")
        
        stats = {}
        
        # –¢—ä—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü–∏
        tables = soup.find_all('table')
        for table in tables:
            rows = table.find_all('tr')
            for row in rows:
                cells = row.find_all(['td', 'th'])
                if len(cells) == 2:
                    key = cells[0].get_text().strip()
                    value = cells[1].get_text().strip()
                    if key and value and len(key) < 100:  # –†–∞–∑—É–º–Ω–∞ –¥—ä–ª–∂–∏–Ω–∞
                        stats[key] = value
        
        # –¢—ä—Ä—Å–∏–º —á–∏—Å–ª–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ç–µ–∫—Å—Ç–∞
        text = soup.get_text()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≥–æ–ª–æ–≤–µ, –º–∞—á–æ–≤–µ –∏ —Ç.–Ω.
        stat_patterns = {
            'goals': r'(\d+)\s*(–≥–æ–ª|goal)',
            'matches': r'(\d+)\s*(–º–∞—á|match)',
            'wins': r'(\d+)\s*(–ø–æ–±–µ–¥–∞|win)',
            'points': r'(\d+)\s*(—Ç–æ—á–∫–∞|point)'
        }
        
        for stat_name, pattern in stat_patterns.items():
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                stats[f'{stat_name}_found'] = [match[0] for match in matches[:3]]
        
        self.data['statistics'] = stats
        print(f"     ‚úÖ Found {len(stats)} statistics")
        return len(stats) > 0

    def analyze_finances_page(self, soup):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ç–µ"""
        print("   üí∞ Analyzing finances...")
        
        finances = {}
        
        # –¢—ä—Ä—Å–∏–º —Å—É–º–∏
        text = soup.get_text()
        
        # –†–∞–∑–ª–∏—á–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏ –∑–∞ –ø–∞—Ä–∏
        money_patterns = [
            r'(\d{1,3}(?:,\d{3})*)\s*[$‚Ç¨–ª–≤]',
            r'[$‚Ç¨]\s*(\d{1,3}(?:,\d{3})*)',
            r'(\d+)\s*–º–∏–ª–∏–æ–Ω–∞?',
            r'(\d+)\s*—Ö–∏–ª—è–¥–∏'
        ]
        
        all_amounts = []
        for pattern in money_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            all_amounts.extend(matches)
        
        if all_amounts:
            finances['amounts_found'] = all_amounts[:10]
        
        # –¢—ä—Ä—Å–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∏ —Ç–∞–±–ª–∏—Ü–∏
        tables = soup.find_all('table')
        for table in tables:
            rows = table.find_all('tr')
            for row in rows:
                cells = row.find_all(['td', 'th'])
                if len(cells) == 2:
                    key = cells[0].get_text().strip()
                    value = cells[1].get_text().strip()
                    
                    # –§–∏–Ω–∞–Ω—Å–æ–≤–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
                    financial_keywords = [
                        '–ø—Ä–∏—Ö–æ–¥', '—Ä–∞–∑—Ö–æ–¥', '–±–∞–ª–∞–Ω—Å', '–∑–∞–ø–ª–∞—Ç–∞', '–±—é–¥–∂–µ—Ç',
                        'income', 'expense', 'budget', 'salary', 'balance'
                    ]
                    
                    if any(keyword in key.lower() for keyword in financial_keywords):
                        finances[key] = value
        
        self.data['finances'] = finances
        print(f"     ‚úÖ Found financial data")
        return len(finances) > 0

    def analyze_tactics_page(self, soup):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ç–∞–∫—Ç–∏–∫–∏—Ç–µ"""
        print("   ‚öΩ Analyzing tactics...")
        
        tactics = {}
        
        # Input –ø–æ–ª–µ—Ç–∞
        inputs = soup.find_all('input')
        for inp in inputs:
            name = inp.get('name', '')
            value = inp.get('value', '')
            input_type = inp.get('type', '')
            
            if name and value and input_type in ['number', 'text', 'hidden']:
                tactics[name] = value
        
        # Select –ø–æ–ª–µ—Ç–∞
        selects = soup.find_all('select')
        for select in selects:
            name = select.get('name', '')
            selected_option = select.find('option', {'selected': True})
            if name and selected_option:
                tactics[name] = selected_option.get_text().strip()
        
        self.data['tactics'] = tactics
        print(f"     ‚úÖ Found {len(tactics)} tactical settings")
        return len(tactics) > 0

    def analyze_training_page(self, soup):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏—Ç–µ"""
        print("   üèÉ Analyzing training...")
        
        training = {}
        
        # –¢—ä—Ä—Å–∏–º –≤—Å–∏—á–∫–∏ input –∏ select –ø–æ–ª–µ—Ç–∞
        form_elements = soup.find_all(['input', 'select'])
        for element in form_elements:
            name = element.get('name', '')
            if 'train' in name.lower() or 'form' in name.lower():
                if element.name == 'select':
                    selected = element.find('option', {'selected': True})
                    if selected:
                        training[name] = selected.get_text().strip()
                else:
                    value = element.get('value', '')
                    if value:
                        training[name] = value
        
        # –¢—ä—Ä—Å–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–Ω–∏ —Ç–∞–±–ª–∏—Ü–∏
        tables = soup.find_all('table')
        training_data = []
        
        for table in tables:
            rows = table.find_all('tr')
            if len(rows) > 1:
                headers = [th.get_text().strip().lower() for th in rows[0].find_all(['th', 'td'])]
                
                if any(keyword in ' '.join(headers) for keyword in ['train', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', 'form', 'condition']):
                    for row in rows[1:]:
                        cells = row.find_all(['td', 'th'])
                        if len(cells) >= 2:
                            row_data = [cell.get_text().strip() for cell in cells]
                            training_data.append(row_data)
        
        if training_data:
            training['training_table'] = training_data[:5]  # –ü—ä—Ä–≤–∏—Ç–µ 5 —Ä–µ–¥–∞
        
        self.data['training'] = training
        print(f"     ‚úÖ Found training data")
        return len(training) > 0

    def analyze_youth_school_page(self, soup):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ —é–Ω–æ—à–µ—Å–∫–∞—Ç–∞ —à–∫–æ–ª–∞"""
        print("   üë∂ Analyzing youth school...")
        
        youth_players = []
        
        tables = soup.find_all('table')
        for table in tables:
            rows = table.find_all('tr')
            if len(rows) > 1:
                headers = [th.get_text().strip().lower() for th in rows[0].find_all(['th', 'td'])]
                
                # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ —Ç–∞–±–ª–∏—Ü–∞ —Å –º–ª–∞–¥–∏ –∏–≥—Ä–∞—á–∏
                if any(keyword in ' '.join(headers) for keyword in ['–∏–º–µ', 'name', '–≤—ä–∑—Ä–∞—Å—Ç', 'age']):
                    for row in rows[1:]:
                        cells = row.find_all(['td', 'th'])
                        if len(cells) >= 2:
                            player_data = {}
                            for i, cell in enumerate(cells):
                                if i < len(headers):
                                    player_data[headers[i]] = cell.get_text().strip()
                            
                            if player_data:
                                youth_players.append(player_data)
        
        self.data['youth_school'] = {
            'players': youth_players,
            'count': len(youth_players)
        }
        
        print(f"     ‚úÖ Found {len(youth_players)} youth players")
        return len(youth_players) > 0

    def analyze_market_page(self, soup):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–∏—è –ø–∞–∑–∞—Ä"""
        print("   üè™ Analyzing transfer market...")
        
        market_players = []
        
        tables = soup.find_all('table')
        for table in tables:
            rows = table.find_all('tr')
            if len(rows) > 1:
                headers = [th.get_text().strip().lower() for th in rows[0].find_all(['th', 'td'])]
                
                # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ –ø–∞–∑–∞—Ä–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞
                market_keywords = ['–∏–º–µ', 'name', '—Ü–µ–Ω–∞', 'price', '–æ—Ñ–µ—Ä—Ç–∞', 'bid']
                if any(keyword in ' '.join(headers) for keyword in market_keywords):
                    
                    for row in rows[1:10]:  # –ü—ä—Ä–≤–∏—Ç–µ 10 –∏–≥—Ä–∞—á–∞
                        cells = row.find_all(['td', 'th'])
                        if len(cells) >= 3:
                            player_data = {}
                            for i, cell in enumerate(cells):
                                if i < len(headers):
                                    player_data[headers[i]] = cell.get_text().strip()
                            
                            if player_data:
                                market_players.append(player_data)
        
        self.data['market_data'] = market_players
        print(f"     ‚úÖ Found {len(market_players)} market players")
        return len(market_players) > 0

    def analyze_news_page(self, soup):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ –Ω–æ–≤–∏–Ω–∏—Ç–µ"""
        print("   üì∞ Analyzing news...")
        
        news_items = []
        
        # –¢—ä—Ä—Å–∏–º –Ω–æ–≤–∏–Ω–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏
        news_containers = soup.find_all(['div', 'p', 'tr'])
        
        for container in news_containers:
            text = container.get_text().strip()
            if len(text) > 50 and len(text) < 500:  # –†–∞–∑—É–º–Ω–∞ –¥—ä–ª–∂–∏–Ω–∞ –∑–∞ –Ω–æ–≤–∏–Ω–∞
                # –¢—ä—Ä—Å–∏–º –¥–∞—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–∞
                date_match = re.search(r'\d{1,2}[./]\d{1,2}[./]\d{2,4}', text)
                
                news_item = {
                    'text': text[:200],  # –ü—ä—Ä–≤–∏—Ç–µ 200 —Å–∏–º–≤–æ–ª–∞
                    'date': date_match.group(0) if date_match else 'Unknown'
                }
                news_items.append(news_item)
                
                if len(news_items) >= 10:  # –ú–∞–∫—Å–∏–º—É–º 10 –Ω–æ–≤–∏–Ω–∏
                    break
        
        self.data['news'] = news_items
        print(f"     ‚úÖ Found {len(news_items)} news items")
        return len(news_items) > 0

    def analyze_generic_page(self, soup, page_name):
        """–û–±—â –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∏"""
        print(f"     üìÑ Generic analysis of {page_name}...")
        
        # –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        tables_count = len(soup.find_all('table'))
        forms_count = len(soup.find_all('form'))
        inputs_count = len(soup.find_all('input'))
        
        # –¢—ä—Ä—Å–∏–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–∞
        text = soup.get_text()
        numbers = re.findall(r'\d+', text)
        
        generic_data = {
            'tables': tables_count,
            'forms': forms_count,
            'inputs': inputs_count,
            'numbers_found': len(numbers),
            'sample_numbers': numbers[:10] if numbers else []
        }
        
        # –ó–∞–ø–∞–∑–≤–∞–º–µ –≤ data —Å–ø–æ—Ä–µ–¥ page_name
        if page_name not in self.data:
            self.data[page_name] = {}
        self.data[page_name].update(generic_data)
        
        print(f"     üìä Tables: {tables_count}, Forms: {forms_count}, Inputs: {inputs_count}")
        return True

    def comprehensive_analysis(self):
        """–ü—ä–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å—ä–±—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏"""
        print(f"\nüß† Performing comprehensive analysis...")
        
        analysis = {
            'timestamp': datetime.now().isoformat(),
            'summary': {},
            'insights': [],
            'recommendations': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ
        total_players = len(self.data['players'])
        analysis['summary']['total_players'] = total_players
        
        if total_players > 0:
            # –ü–æ–∑–∏—Ü–∏–∏
            positions = {}
            ages = []
            
            for player in self.data['players']:
                for key, value in player.items():
                    if '–ø–æ–∑–∏—Ü–∏—è' in key.lower() or 'position' in key.lower():
                        positions[value] = positions.get(value, 0) + 1
                    
                    if '–≤—ä–∑—Ä–∞—Å—Ç' in key.lower() or 'age' in key.lower():
                        try:
                            age_match = re.search(r'\d+', str(value))
                            if age_match:
                                age = int(age_match.group())
                                if 15 <= age <= 45:  # –†–∞–∑—É–º–Ω–∏ –≥—Ä–∞–Ω–∏—Ü–∏ –∑–∞ –≤—ä–∑—Ä–∞—Å—Ç
                                    ages.append(age)
                        except:
                            pass
            
            analysis['summary']['positions'] = positions
            if ages:
                analysis['summary']['average_age'] = round(sum(ages) / len(ages), 1)
                analysis['summary']['age_range'] = f"{min(ages)}-{max(ages)}"
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –¥—Ä—É–≥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = ['finances', 'tactics', 'youth_school', 'market_data', 'statistics', 'training']
        
        for category in categories:
            if category in self.data and self.data[category]:
                if isinstance(self.data[category], dict):
                    if category == 'youth_school':
                        analysis['summary'][f'{category}_count'] = self.data[category].get('count', 0)
                    else:
                        analysis['summary'][f'{category}_items'] = len(self.data[category])
                elif isinstance(self.data[category], list):
                    analysis['summary'][f'{category}_count'] = len(self.data[category])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ insights –∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
        if total_players > 0:
            analysis['insights'].append(f"–û—Ç–±–æ—Ä—ä—Ç –∏–º–∞ {total_players} –∏–≥—Ä–∞—á–∏ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏")
        
        if analysis['summary'].get('average_age', 0) > 28:
            analysis['recommendations'].append("–°—Ä–µ–¥–Ω–∞—Ç–∞ –≤—ä–∑—Ä–∞—Å—Ç –µ –≤–∏—Å–æ–∫–∞ - –ø–æ–º–∏—Å–ª–µ—Ç–µ –∑–∞ –º–ª–∞–¥–∏ –∏–≥—Ä–∞—á–∏")
        
        if analysis['summary'].get('youth_school_count', 0) < 5:
            analysis['recommendations'].append("–ú–∞–ª–∫–æ –∏–≥—Ä–∞—á–∏ –≤ —é–Ω–æ—à–µ—Å–∫–∞—Ç–∞ —à–∫–æ–ª–∞ - –∏–Ω–≤–µ—Å—Ç–∏—Ä–∞–π—Ç–µ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ")
        
        if analysis['summary'].get('market_data_count', 0) > 0:
            analysis['insights'].append(f"–ù–∞–º–µ—Ä–µ–Ω–∏ {analysis['summary']['market_data_count']} –∏–≥—Ä–∞—á–∏ –Ω–∞ –ø–∞–∑–∞—Ä–∞")
        
        self.data['analysis'] = analysis
        return analysis

    def save_comprehensive_results(self):
        """–ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # JSON —Ñ–∞–π–ª
        json_file = f"hockey_arena_fixed_{timestamp}.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)
        
        # CSV —Ñ–∞–π–ª–æ–≤–µ
        csv_files = []
        
        if self.data['players']:
            players_csv = f"players_fixed_{timestamp}.csv"
            # –°—ä–±–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –≤—ä–∑–º–æ–∂–Ω–∏ –∫–æ–ª–æ–Ω–∏
            all_keys = set()
            for player in self.data['players']:
                all_keys.update(player.keys())
            
            with open(players_csv, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=sorted(all_keys))
                writer.writeheader()
                writer.writerows(self.data['players'])
            csv_files.append(players_csv)
        
        if self.data['market_data']:
            market_csv = f"market_fixed_{timestamp}.csv"
            all_keys = set()
            for player in self.data['market_data']:
                all_keys.update(player.keys())
            
            with open(market_csv, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=sorted(all_keys))
                writer.writeheader()
                writer.writerows(self.data['market_data'])
            csv_files.append(market_csv)
        
        # –ü–æ–¥—Ä–æ–±–µ–Ω –æ—Ç—á–µ—Ç
        report_file = f"hockey_arena_fixed_report_{timestamp}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("üèí HOCKEY ARENA COMPREHENSIVE ANALYSIS REPORT\n")
            f.write("=" * 60 + "\n")
            f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"User: {self.username}\n\n")
            
            if 'analysis' in self.data:
                analysis = self.data['analysis']
                
                f.write("üìä SUMMARY:\n")
                for key, value in analysis.get('summary', {}).items():
                    f.write(f"  ‚Ä¢ {key}: {value}\n")
                
                f.write("\nüîç INSIGHTS:\n")
                for insight in analysis.get('insights', []):
                    f.write(f"  ‚Ä¢ {insight}\n")
                
                f.write("\nüí° RECOMMENDATIONS:\n")
                for rec in analysis.get('recommendations', []):
                    f.write(f"  ‚Ä¢ {rec}\n")
            
            # –î–µ—Ç–∞–π–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories_to_show = ['players', 'market_data', 'finances', 'tactics', 'youth_school']
            
            for category in categories_to_show:
                if self.data.get(category):
                    f.write(f"\nüìã {category.upper()}:\n")
                    
                    if isinstance(self.data[category], list):
                        f.write(f"  Count: {len(self.data[category])}\n")
                        for i, item in enumerate(self.data[category][:3], 1):
                            f.write(f"  {i}. {str(item)[:100]}...\n")
                        if len(self.data[category]) > 3:
                            f.write(f"  ... and {len(self.data[category]) - 3} more\n")
                    
                    elif isinstance(self.data[category], dict):
                        for key, value in list(self.data[category].items())[:5]:
                            f.write(f"  {key}: {str(value)[:50]}\n")
                        if len(self.data[category]) > 5:
                            f.write(f"  ... and {len(self.data[category]) - 5} more\n")
        
        print(f"\nüíæ Results saved:")
        print(f"   üìÑ {json_file} (complete data)")
        print(f"   üìÑ {report_file} (readable report)")
        for csv_file in csv_files:
            print(f"   üìÑ {csv_file} (CSV data)")
        
        return json_file, report_file, csv_files

    def run_comprehensive_analysis(self):
        """–°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—ä–ª–Ω–∏—è –∞–Ω–∞–ª–∏–∑"""
        print("üöÄ Starting FIXED comprehensive Hockey Arena analysis...")
        print(f"üéØ Target: {len(self.pages_to_scrape)} pages")
        
        # –õ–æ–≥–≤–∞–Ω–µ
        if not self.login():
            print("‚ùå Login failed - stopping analysis")
            return False
        
        print("‚úÖ Login successful!")
        time.sleep(2)
        
        # Scraping –Ω–∞ –≤—Å–∏—á–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∏
        success_count = 0
        failed_pages = []
        
        for page_name, page_url in self.pages_to_scrape.items():
            if self.scrape_page(page_name, page_url):
                success_count += 1
            else:
                failed_pages.append(page_name)
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∏—Ç–µ
        
        print(f"\nüìä Scraping completed:")
        print(f"   ‚úÖ Successful: {success_count}/{len(self.pages_to_scrape)} pages")
        if failed_pages:
            print(f"   ‚ùå Failed: {failed_pages}")
        
        # Comprehensive –∞–Ω–∞–ª–∏–∑
        analysis = self.comprehensive_analysis()
        
        # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        json_file, report_file, csv_files = self.save_comprehensive_results()
        
        print(f"\nüéâ COMPREHENSIVE ANALYSIS COMPLETED!")
        print(f"üìà Results:")
        print(f"   ‚Ä¢ Players found: {len(self.data['players'])}")
        print(f"   ‚Ä¢ Market players: {len(self.data['market_data'])}")
        print(f"   ‚Ä¢ Youth players: {self.data['youth_school'].get('count', 0)}")
        print(f"   ‚Ä¢ Financial data items: {len(self.data['finances'])}")
        print(f"   ‚Ä¢ Tactical settings: {len(self.data['tactics'])}")
        print(f"   ‚Ä¢ Training data: {len(self.data['training'])}")
        print(f"   ‚Ä¢ Statistics: {len(self.data['statistics'])}")
        
        return True

def main():
    print("üèí FIXED COMPREHENSIVE HOCKEY ARENA ANALYZER")
    print("=" * 55)
    
    username = "delirium"
    password = "Zweider4e"
    
    analyzer = FixedHockeyAnalyzer(username, password)
    success = analyzer.run_comprehensive_analysis()
    
    if success:
        print("\n‚úÖ SUCCESS! Complete Hockey Arena analysis finished.")
        print("üìÅ Check all the generated files for comprehensive data.")
        print("\nüéØ Next step: Use this data to create the perfect Hockey Arena Organizer!")
    else:
        print("\n‚ùå ANALYSIS FAILED!")

if __name__ == "__main__":
    main()